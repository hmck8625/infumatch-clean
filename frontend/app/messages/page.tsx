'use client';

import { useState, useEffect, Suspense } from 'react';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import { signOut } from 'next-auth/react';
import Header from '@/components/Header';
// import { EmailThread, GmailMessage } from '@/lib/gmail'; // Server-side only
// Temporary interfaces for client-side
interface EmailThread { id: string; snippet: string; historyId: string; messages?: GmailMessage[]; }
interface GmailMessage { 
  id: string; 
  threadId: string; 
  snippet: string; 
  internalDate: string;
  payload: {
    headers: { name: string; value: string; }[];
    body?: { data?: string; };
    parts?: { mimeType: string; body?: { data?: string; }; }[];
  };
  attachments?: any[];
}
import { ErrorBoundary, useErrorHandler } from '@/components/error-boundary';
import { AuthGuard, UserInfo } from '@/components/auth-guard';
import { useAuthError } from '@/hooks/use-auth-error';
import { AttachmentDisplay } from '@/components/attachment-display';
import { AttachmentUpload } from '@/components/attachment-upload';
import { EmailSearch } from '@/components/email-search';
import { NotificationManager } from '@/components/notification-manager';
import ThreadAutomationControl from '@/components/ThreadAutomationControl';
import AutomationOrchestrator from '@/components/AutomationOrchestrator';
// import { useRealtimeGmail } from '@/hooks/use-realtime-gmail'; // Temporarily disabled
// import { SearchFilters } from '@/lib/gmail'; // Server-side only
interface SearchFilters { query?: string; labelIds?: string[]; maxResults?: number; }

function MessagesPageContent() {
  const searchParams = useSearchParams();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const handleError = useErrorHandler();
  const { handleApiResponse, isAuthenticated: authStatus } = useAuthError();
  const [selectedThread, setSelectedThread] = useState<string | null>(null);
  const [threads, setThreads] = useState<EmailThread[]>([]);
  const [currentThread, setCurrentThread] = useState<EmailThread | null>(null);
  const [replyText, setReplyText] = useState('');
  const [isVisible, setIsVisible] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [isLoadingThreads, setIsLoadingThreads] = useState(false);
  const [replyPatterns, setReplyPatterns] = useState<any[]>([]);
  const [isGeneratingPatterns, setIsGeneratingPatterns] = useState(false);
  const [threadAnalysis, setThreadAnalysis] = useState<any>(null);
  const [attachmentFiles, setAttachmentFiles] = useState<File[]>([]);
  const [showSearch, setShowSearch] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [searchFilters, setSearchFilters] = useState<SearchFilters>({});
  const [detailedTrace, setDetailedTrace] = useState<any>(null);
  const [showDetailedTrace, setShowDetailedTrace] = useState(false);
  const [aiBasicReply, setAiBasicReply] = useState<string>('');
  const [aiReplyReasoning, setAiReplyReasoning] = useState<string>('');
  const [showReasoning, setShowReasoning] = useState<boolean>(false);
  
  // „Çπ„É¨„ÉÉ„Éâ„Åî„Å®„ÅÆËá™ÂãïÂåñÁä∂ÊÖã„ÇíÁÆ°ÁêÜ
  const [threadAutomationStates, setThreadAutomationStates] = useState<{[threadId: string]: {mode: string, isActive: boolean}}>({});

  // Ëá™ÂãïÂåñÁä∂ÊÖã„ÇílocalStorage„Å´Ê∞∏Á∂öÂåñ
  useEffect(() => {
    const savedAutomationStates = localStorage.getItem('threadAutomationStates');
    if (savedAutomationStates) {
      try {
        const parsed = JSON.parse(savedAutomationStates);
        setThreadAutomationStates(parsed);
        console.log('üîÑ ‰øùÂ≠ò„Åï„Çå„ÅüËá™ÂãïÂåñÁä∂ÊÖã„ÇíÂæ©ÂÖÉ:', {
          Ëá™ÂãïÂåñ‰∏≠„Çπ„É¨„ÉÉ„ÉâÊï∞: Object.keys(parsed).filter(id => parsed[id]?.isActive).length,
          Ëá™ÂãïÂåñ„Çπ„É¨„ÉÉ„ÉâID: Object.keys(parsed).filter(id => parsed[id]?.isActive)
        });
      } catch (error) {
        console.error('‚ùå Ëá™ÂãïÂåñÁä∂ÊÖã„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error);
      }
    }
  }, []);

  // Ëá™ÂãïÂåñÁä∂ÊÖã„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´localStorage„Å´‰øùÂ≠ò
  useEffect(() => {
    if (Object.keys(threadAutomationStates).length > 0) {
      localStorage.setItem('threadAutomationStates', JSON.stringify(threadAutomationStates));
      console.log('üíæ Ëá™ÂãïÂåñÁä∂ÊÖã„Çí‰øùÂ≠ò:', {
        Ëá™ÂãïÂåñ‰∏≠„Çπ„É¨„ÉÉ„ÉâÊï∞: Object.keys(threadAutomationStates).filter(id => threadAutomationStates[id]?.isActive).length,
        Ëá™ÂãïÂåñ„Çπ„É¨„ÉÉ„ÉâID: Object.keys(threadAutomationStates).filter(id => threadAutomationStates[id]?.isActive)
      });
    }
  }, [threadAutomationStates]);
  
  // GmailÁõ£Ë¶ñÁä∂ÊÖã
  const [gmailMonitoringActive, setGmailMonitoringActive] = useState(false);
  const [lastThreadCheck, setLastThreadCheck] = useState<string | null>(null);
  const [trackedThreads, setTrackedThreads] = useState<{[threadId: string]: {lastMessageTime: string, isAutomated: boolean}}>({});

  // ËøΩË∑°Áä∂ÊÖã„ÇílocalStorage„Å´Ê∞∏Á∂öÂåñ
  useEffect(() => {
    const savedTrackedThreads = localStorage.getItem('trackedThreads');
    if (savedTrackedThreads) {
      try {
        const parsed = JSON.parse(savedTrackedThreads);
        setTrackedThreads(parsed);
        console.log('üîÑ ‰øùÂ≠ò„Åï„Çå„ÅüËøΩË∑°Áä∂ÊÖã„ÇíÂæ©ÂÖÉ:', {
          ËøΩË∑°‰∏≠„Çπ„É¨„ÉÉ„ÉâÊï∞: Object.keys(parsed).length,
          „Çπ„É¨„ÉÉ„ÉâID: Object.keys(parsed)
        });
      } catch (error) {
        console.error('‚ùå ËøΩË∑°Áä∂ÊÖã„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error);
      }
    }
  }, []);

  // ËøΩË∑°Áä∂ÊÖã„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´localStorage„Å´‰øùÂ≠ò
  useEffect(() => {
    if (Object.keys(trackedThreads).length > 0) {
      localStorage.setItem('trackedThreads', JSON.stringify(trackedThreads));
      console.log('üíæ ËøΩË∑°Áä∂ÊÖã„Çí‰øùÂ≠ò:', {
        ËøΩË∑°‰∏≠„Çπ„É¨„ÉÉ„ÉâÊï∞: Object.keys(trackedThreads).length,
        „Çπ„É¨„ÉÉ„ÉâID: Object.keys(trackedThreads)
      });
    }
  }, [trackedThreads]);
  
  // GmailÁõ£Ë¶ñÁä∂ÊÖãÂ§âÊõ¥„ÅÆ„É©„ÉÉ„Éë„ÉºÈñ¢Êï∞Ôºà„É≠„Ç∞‰ªò„ÅçÔºâ
  const handleMonitoringChange = (isActive: boolean) => {
    console.log('üìã GmailÁõ£Ë¶ñÁä∂ÊÖãÂ§âÊõ¥Ë¶ÅÊ±Ç:', {
      ÁèæÂú®„ÅÆÁä∂ÊÖã: gmailMonitoringActive,
      Êñ∞„Åó„ÅÑÁä∂ÊÖã: isActive,
      ÊôÇÂàª: new Date().toLocaleTimeString()
    });
    setGmailMonitoringActive(isActive);
    console.log('‚úÖ GmailÁõ£Ë¶ñÁä∂ÊÖãÊõ¥Êñ∞ÂÆå‰∫Ü:', isActive);
  };
  
  // GmailÊñ∞ÁùÄÁõ£Ë¶ñÊ©üËÉΩ
  const checkForNewEmails = async () => {
    if (!gmailMonitoringActive) {
      console.log('‚è∏Ô∏è GmailÁõ£Ë¶ñ„ÅØÁÑ°Âäπ„Åß„Åô„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô„ÄÇ');
      return;
    }
    
    try {
      console.log('üìß GmailÊñ∞ÁùÄ„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã', {
        ÊôÇÂàª: new Date().toLocaleTimeString(),
        Áõ£Ë¶ñÁä∂ÊÖã: gmailMonitoringActive,
        ÂâçÂõû„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Åü„Çπ„É¨„ÉÉ„ÉâID: lastThreadCheck,
        ËøΩË∑°‰∏≠„Çπ„É¨„ÉÉ„ÉâÊï∞: Object.keys(trackedThreads).length
      });
      
      // Gmail API„ÅßÊúÄÊñ∞„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÇíÂèñÂæó
      console.log('üåê Gmail APIÂëº„Å≥Âá∫„Åó: /api/gmail/threads?maxResults=20');
      const response = await fetch('/api/gmail/threads?maxResults=20');
      
      console.log('üì° Gmail API„É¨„Çπ„Éù„É≥„Çπ:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText
      });
      
      if (!response.ok) {
        console.error('‚ùå Gmail APIÂëº„Å≥Âá∫„ÅóÂ§±Êïó:', {
          status: response.status,
          statusText: response.statusText
        });
        return;
      }
      
      const data = await response.json();
      const newThreads = data.threads || [];
      
      console.log('üì¨ ÂèñÂæó„Åó„Åü„Çπ„É¨„ÉÉ„ÉâÊÉÖÂ†±:', {
        Á∑è„Çπ„É¨„ÉÉ„ÉâÊï∞: newThreads.length,
        ÊúÄÊñ∞„Çπ„É¨„ÉÉ„ÉâID: newThreads.length > 0 ? newThreads[0].id : '„Å™„Åó',
        ÂÖ®„Çπ„É¨„ÉÉ„ÉâID: newThreads.map(t => t.id).slice(0, 3) // ÊúÄÂàù„ÅÆ3„Å§„ÅÆID„ÅÆ„ÅøË°®Á§∫
      });
      
      if (newThreads.length > 0) {
        const latestThreadId = newThreads[0].id;
        const latestThreadSnippet = newThreads[0].snippet || '';
        
        console.log('üîç ÊúÄÊñ∞„Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞:', {
          ID: latestThreadId,
          snippet: latestThreadSnippet.substring(0, 100) + '...',
          ÂâçÂõû„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ: lastThreadCheck
        });
        
        // Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„Éâ„ÅåÊ§úÂá∫„Åï„Çå„ÅüÂ†¥Âêà
        if (lastThreadCheck && latestThreadId !== lastThreadCheck) {
          console.log('üÜïüö® Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„ÉâÊ§úÂá∫ÔºÅ', {
            Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„ÉâID: latestThreadId,
            ÂâçÂõû„Çπ„É¨„ÉÉ„ÉâID: lastThreadCheck,
            „Çπ„Éã„Éö„ÉÉ„Éà: latestThreadSnippet.substring(0, 150)
          });
          
          // „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„Éà„ÇíÂç≥Â∫ß„Å´Êõ¥Êñ∞
          console.log('üîÑ „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞‰∏≠...');
          await loadThreads();
          console.log('‚úÖ „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü');
          
          // Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„Éâ„Å´ÂØæ„Åó„Å¶Ëá™Âãï‰∫§Ê∏â„ÇíÂÆüË°å
          await processNewThread(latestThreadId);
        } else if (!lastThreadCheck) {
          console.log('üîÑ ÂàùÂõû„ÉÅ„Çß„ÉÉ„ÇØ - Âü∫Ê∫ñ„Çπ„É¨„ÉÉ„ÉâID„ÇíË®≠ÂÆö');
        } else {
          console.log('üì≠ Êñ∞„Åó„ÅÑ„Çπ„É¨„ÉÉ„Éâ„Å™„Åó - Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆÊõ¥Êñ∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ');
        }
        
        // Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆÊõ¥Êñ∞Ê§úÂá∫ÔºàÊñ∞Ê©üËÉΩÔºâ
        await checkExistingThreadsForUpdates(newThreads);
        
        setLastThreadCheck(latestThreadId);
      } else {
        console.log('üì™ „Çπ„É¨„ÉÉ„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
      }
      
      console.log('‚úÖ GmailÊñ∞ÁùÄ„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü', new Date().toLocaleTimeString());
      
    } catch (error) {
      console.error('‚ùå GmailÁõ£Ë¶ñ„Ç®„É©„Éº:', {
        error: error,
        message: error.message,
        stack: error.stack
      });
    }
  };

  // Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆÊõ¥Êñ∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åô„ÇãÊñ∞Ê©üËÉΩ
  const checkExistingThreadsForUpdates = async (currentThreads: any[]) => {
    const automatedThreadIds = Object.keys(threadAutomationStates).filter(
      threadId => threadAutomationStates[threadId]?.isActive && threadAutomationStates[threadId]?.mode === 'semi_auto'
    );
    
    if (automatedThreadIds.length === 0) {
      console.log('ü§ñ ÂçäËá™ÂãïÂÆüË°å‰∏≠„ÅÆ„Çπ„É¨„ÉÉ„Éâ„Å™„Åó');
      return;
    }
    
    console.log('ü§ñ ÂçäËá™ÂãïÂÆüË°å‰∏≠„Çπ„É¨„ÉÉ„Éâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ:', {
      ÂØæË±°„Çπ„É¨„ÉÉ„ÉâÊï∞: automatedThreadIds.length,
      „Çπ„É¨„ÉÉ„ÉâID: automatedThreadIds
    });
    
    for (const threadId of automatedThreadIds) {
      try {
        // „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞„ÇíÂèñÂæó„Åó„Å¶ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        console.log(`üîç „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆË©≥Á¥∞„ÇíÂèñÂæó‰∏≠...`);
        const threadResponse = await fetch(`/api/gmail/threads/${threadId}`);
        
        if (!threadResponse.ok) {
          console.warn(`‚ö†Ô∏è „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆÂèñÂæó„Å´Â§±Êïó:`, threadResponse.status);
          continue;
        }
        
        const threadData = await threadResponse.json();
        // API„É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        console.log(`üìä „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆAPI„É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†:`, {
          hasThread: !!threadData.thread,
          hasMessages: !!threadData.messages,
          threadKeysCount: threadData.thread ? Object.keys(threadData.thread).length : 0,
          directKeysCount: Object.keys(threadData).length,
          sampleKeys: Object.keys(threadData).slice(0, 5)
        });
        
        // „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„Å´Âøú„Åò„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
        const actualThreadData = threadData.thread || threadData;
        const messages = actualThreadData.messages || [];
        
        if (messages.length === 0) {
          console.warn(`‚ö†Ô∏è „Çπ„É¨„ÉÉ„Éâ ${threadId} „Å´„É°„ÉÉ„Çª„Éº„Ç∏„Å™„Åó`);
          continue;
        }
        
        // ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊôÇÂàª„ÇíÂèñÂæó
        const latestMessage = messages[messages.length - 1];
        const latestMessageTime = latestMessage.internalDate;
        
        console.log(`üìÖ „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏ÊôÇÂàª:`, {
          ÁèæÂú®„ÅÆÊôÇÂàª: latestMessageTime,
          ÂâçÂõû„ÅÆÊôÇÂàª: trackedThreads[threadId]?.lastMessageTime,
          „É°„ÉÉ„Çª„Éº„Ç∏Êï∞: messages.length
        });
        
        // ÂâçÂõû„ÉÅ„Çß„ÉÉ„ÇØÊôÇ„Çà„ÇäÊñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        const previousMessageTime = trackedThreads[threadId]?.lastMessageTime;
        
        if (previousMessageTime && latestMessageTime !== previousMessageTime) {
          console.log('üö®üí¨ Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„Å´Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏Ê§úÂá∫!', {
            „Çπ„É¨„ÉÉ„ÉâID: threadId,
            ÂâçÂõû„É°„ÉÉ„Çª„Éº„Ç∏ÊôÇÂàª: previousMessageTime,
            Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏ÊôÇÂàª: latestMessageTime,
            „É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ: latestMessage.snippet?.substring(0, 100) + '...'
          });
          
          // „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
          console.log('üîÑ „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞‰∏≠...');
          await loadThreads();
          console.log('‚úÖ „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü');
          
          // Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆËøî‰ø°„Å´ÂØæ„Åó„Å¶Ëá™Âãï‰∫§Ê∏â„ÇíÂÆüË°å
          await processExistingThreadReply(threadId);
        } else if (!previousMessageTime) {
          console.log(`üîÑ „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆÂàùÂõûËøΩË∑°ÈñãÂßã`);
        } else {
          console.log(`üì≠ „Çπ„É¨„ÉÉ„Éâ ${threadId} „Å´Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏„Å™„Åó`);
        }
        
        // ËøΩË∑°ÊÉÖÂ†±„ÇíÊõ¥Êñ∞
        setTrackedThreads(prev => ({
          ...prev,
          [threadId]: {
            lastMessageTime: latestMessageTime,
            isAutomated: true
          }
        }));
        
      } catch (error) {
        console.error(`‚ùå „Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠„Å´„Ç®„É©„Éº:`, error);
      }
    }
  };
  
  // Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„Éâ„ÇíÂá¶ÁêÜ
  const processNewThread = async (threadId: string) => {
    try {
      console.log('ü§ñ Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„Éâ„ÅÆËá™Âãï‰∫§Ê∏âÈñãÂßã:', {
        „Çπ„É¨„ÉÉ„ÉâID: threadId,
        ÈñãÂßãÊôÇÂàª: new Date().toLocaleTimeString()
      });
      
      // „Çπ„É¨„ÉÉ„Éâ„ÅÆË©≥Á¥∞„ÇíÂèñÂæó
      console.log('üì® „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞ÂèñÂæó‰∏≠:', threadId);
      const threadResponse = await fetch(`/api/gmail/threads/${threadId}`);
      
      console.log('üì° „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞APIÂøúÁ≠î:', {
        status: threadResponse.status,
        ok: threadResponse.ok,
        statusText: threadResponse.statusText
      });
      
      if (!threadResponse.ok) {
        console.error('‚ùå „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞ÂèñÂæóÂ§±Êïó:', threadResponse.status);
        return;
      }
      
      const threadData = await threadResponse.json();
      const messages = threadData.messages || [];
      
      console.log('üìß ÂèñÂæó„Åó„Åü„É°„ÉÉ„Çª„Éº„Ç∏ÊÉÖÂ†±:', {
        „É°„ÉÉ„Çª„Éº„Ç∏Êï∞: messages.length,
        „Çπ„É¨„ÉÉ„ÉâID: threadId
      });
      
      if (messages.length === 0) {
        console.warn('‚ö†Ô∏è „É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        return;
      }
      
      // ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
      const latestMessage = messages[messages.length - 1];
      const messageContent = extractMessageContent(latestMessage);
      const fromHeader = latestMessage.payload?.headers?.find(h => h.name === 'From')?.value || '';
      const subjectHeader = latestMessage.payload?.headers?.find(h => h.name === 'Subject')?.value || '';
      
      // Reply-To„Éò„ÉÉ„ÉÄ„Éº„Å®To„Éò„ÉÉ„ÉÄ„Éº„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ
      const replyToHeader = latestMessage.payload?.headers?.find(h => h.name === 'Reply-To')?.value || '';
      const toHeader = latestMessage.payload?.headers?.find(h => h.name === 'To')?.value || '';
      
      // Ëá™ÂàÜÂÆõ„É°„Éº„É´„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶ÁÑ°Èôê„É´„Éº„Éó„ÇíÈò≤„Åê
      const isFromSelf = fromHeader.includes('@gmail.com') && (
        fromHeader.includes('infumatch') || 
        fromHeader.includes('Ëá™ÂàÜ„ÅÆ„É°„Éº„É´„Éâ„É°„Ç§„É≥') // ÂÆüÈöõ„ÅÆ„Éâ„É°„Ç§„É≥„Å´ÁΩÆ„ÅçÊèõ„Åà
      );
      
      // Ëá™ÂãïÈÄÅ‰ø°„É°„Éº„É´„ÅÆÂèØËÉΩÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const isAutoGenerated = fromHeader.includes('noreply') || 
                              fromHeader.includes('no-reply') ||
                              fromHeader.includes('mailer-daemon') ||
                              subjectHeader.includes('Delivery Status Notification') ||
                              subjectHeader.includes('Undelivered Mail');
      
      if (isFromSelf) {
        console.log('‚ö†Ô∏è Ëá™ÂàÜ„Åã„Çâ„ÅÆ„É°„Éº„É´„ÅÆ„Åü„ÇÅËá™ÂãïËøî‰ø°„Çí„Çπ„Ç≠„ÉÉ„Éó:', fromHeader);
        return;
      }
      
      if (isAutoGenerated) {
        console.log('‚ö†Ô∏è Ëá™ÂãïÈÄÅ‰ø°„É°„Éº„É´„ÅÆ„Åü„ÇÅËá™ÂãïËøî‰ø°„Çí„Çπ„Ç≠„ÉÉ„Éó:', fromHeader);
        return;
      }
      
      // Ëøî‰ø°ÂÖà„ÇíÊ±∫ÂÆöÔºàReply-ToÂÑ™ÂÖà„ÄÅ„Å™„Åë„Çå„Å∞FromÔºâ
      const replyToAddress = replyToHeader || fromHeader;
      
      console.log('üìß Ëøî‰ø°ÂÖàÊ±∫ÂÆö:', {
        From: fromHeader,
        ReplyTo: replyToHeader,
        To: toHeader,
        Ê±∫ÂÆö„Åï„Çå„ÅüËøî‰ø°ÂÖà: replyToAddress
      });
      
      console.log('üì¨ ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏Ë©≥Á¥∞:', {
        ÈÄÅ‰ø°ËÄÖ: fromHeader,
        ‰ª∂Âêç: subjectHeader,
        ÂÜÖÂÆπ„Éó„É¨„Éì„É•„Éº: messageContent.substring(0, 100) + '...',
        „É°„ÉÉ„Çª„Éº„Ç∏ID: latestMessage.id
      });
      
      // Ëá™Âãï‰∫§Ê∏âAPI„ÇíÂëº„Å≥Âá∫„Åó
      console.log('üöÄ Ëá™Âãï‰∫§Ê∏âAPIÂëº„Å≥Âá∫„ÅóÈñãÂßã');
      const negotiationPayload = {
        conversation_history: messages,
        new_message: messageContent,
        context: {
          auto_reply: true,
          thread_id: threadId,
          sender: fromHeader,
          subject: subjectHeader
        }
      };
      
      console.log('üì§ Ëá™Âãï‰∫§Ê∏âAPI„Éö„Ç§„É≠„Éº„Éâ:', {
        ‰ºöË©±Â±•Ê≠¥Êï∞: messages.length,
        Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏ÊñáÂ≠óÊï∞: messageContent.length,
        „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà: negotiationPayload.context
      });
      
      const negotiationResponse = await fetch('/api/v1/negotiation/continue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(negotiationPayload)
      });
      
      console.log('üì° Ëá™Âãï‰∫§Ê∏âAPIÂøúÁ≠î:', {
        status: negotiationResponse.status,
        ok: negotiationResponse.ok,
        statusText: negotiationResponse.statusText
      });
      
      if (negotiationResponse.ok) {
        const result = await negotiationResponse.json();
        console.log('‚úÖ Ëá™Âãï‰∫§Ê∏âÂÆå‰∫Ü:', {
          ÊàêÂäü: result.success,
          ÁîüÊàê„Åï„Çå„ÅüËøî‰ø°: result.content ? result.content.substring(0, 100) + '...' : '„Å™„Åó',
          Âá¶ÁêÜÊôÇÈñì: new Date().toLocaleTimeString()
        });
        
        // Ëøî‰ø°„ÅåÂøÖË¶Å„Åß„ÄÅ„Åã„Å§ÁîüÊàê„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøËá™ÂãïÈÄÅ‰ø°
        if (result.success && result.content && !result.metadata?.reply_not_needed && !result.metadata?.caution_required) {
          console.log('üì§ Ëá™ÂãïËøî‰ø°ÈÄÅ‰ø°ÈñãÂßã:', {
            „Çπ„É¨„ÉÉ„ÉâID: threadId,
            Ëøî‰ø°ÂÜÖÂÆπÊñáÂ≠óÊï∞: result.content.length,
            ÈÄÅ‰ø°ÂØæË±°: replyToAddress
          });
          
          try {
            // 1. Ëøî‰ø°„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
            console.log('üìã Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæó‰∏≠...');
            const replyHeadersResponse = await fetch(`/api/gmail/threads/${threadId}/reply-headers?messageId=${latestMessage.id}`);
            
            let replyHeaders = null;
            if (replyHeadersResponse.ok) {
              const headerData = await replyHeadersResponse.json();
              replyHeaders = headerData.replyHeaders;
              console.log('‚úÖ Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæóÊàêÂäü:', replyHeaders);
            } else {
              console.warn('‚ö†Ô∏è Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæóÂ§±Êïó„ÄÅÂü∫Êú¨ÊÉÖÂ†±„ÅßÈÄÅ‰ø°„Åó„Åæ„Åô');
            }
            
            // 2. Ëøî‰ø°„É°„Éº„É´„ÇíÈÄÅ‰ø°
            console.log('üì® GmailÈÄÅ‰ø°APIÂëº„Å≥Âá∫„Åó‰∏≠...');
            const sendPayload = {
              to: replyToAddress,
              subject: subjectHeader.startsWith('Re: ') ? subjectHeader : `Re: ${subjectHeader}`,
              body: result.content,
              threadId: threadId,
              replyToMessageId: latestMessage.id,
              replyHeaders: replyHeaders
            };
            
            console.log('üì§ ÈÄÅ‰ø°„Éö„Ç§„É≠„Éº„Éâ:', {
              ÂÆõÂÖà: sendPayload.to,
              ‰ª∂Âêç: sendPayload.subject,
              Êú¨ÊñáÊñáÂ≠óÊï∞: sendPayload.body.length,
              „Çπ„É¨„ÉÉ„ÉâID: sendPayload.threadId,
              Ëøî‰ø°ÂÖà„É°„ÉÉ„Çª„Éº„Ç∏ID: sendPayload.replyToMessageId,
              „Éò„ÉÉ„ÉÄ„ÉºÊúâÁÑ°: !!sendPayload.replyHeaders
            });
            
            const sendResponse = await fetch('/api/gmail/send', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(sendPayload)
            });
            
            if (sendResponse.ok) {
              const sendResult = await sendResponse.json();
              console.log('‚úÖ Ëá™ÂãïËøî‰ø°ÈÄÅ‰ø°ÊàêÂäü!', {
                „É°„ÉÉ„Çª„Éº„Ç∏ID: sendResult.messageId,
                ÈÄÅ‰ø°ÂÆå‰∫ÜÊôÇÂàª: new Date().toLocaleTimeString(),
                ÂÆõÂÖà: sendPayload.to,
                ‰ª∂Âêç: sendPayload.subject
              });
            } else {
              const sendError = await sendResponse.text();
              console.error('‚ùå Ëá™ÂãïËøî‰ø°ÈÄÅ‰ø°Â§±Êïó:', {
                status: sendResponse.status,
                error: sendError,
                payload: sendPayload
              });
            }
            
          } catch (sendError) {
            console.error('‚ùå Ëá™ÂãïËøî‰ø°ÈÄÅ‰ø°‰∏≠„ÅÆ„Ç®„É©„Éº:', {
              error: sendError,
              message: sendError instanceof Error ? sendError.message : 'Unknown error',
              „Çπ„É¨„ÉÉ„ÉâID: threadId
            });
          }
        } else {
          console.log('‚ÑπÔ∏è Ëá™ÂãïËøî‰ø°„Çπ„Ç≠„ÉÉ„Éó:', {
            success: result.success,
            hasContent: !!result.content,
            replyNotNeeded: result.metadata?.reply_not_needed,
            cautionRequired: result.metadata?.caution_required,
            ÁêÜÁî±: result.metadata?.reply_not_needed ? 'Ëøî‰ø°‰∏çË¶Å„É°„Éº„É´' : 
                  result.metadata?.caution_required ? 'Ê≥®ÊÑè„ÅåÂøÖË¶Å„Å™„É°„Éº„É´' : 
                  !result.content ? '„Ç≥„É≥„ÉÜ„É≥„ÉÑÁîüÊàêÂ§±Êïó' : '„Åù„ÅÆ‰ªñ'
          });
        }
        
        // „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        console.log('üîÑ Ëá™Âãï‰∫§Ê∏âÂæå„ÅÆ„Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞‰∏≠...');
        await loadThreads();
        console.log('‚úÖ Ëá™Âãï‰∫§Ê∏âÂæå„ÅÆ„Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü');
      } else {
        const errorText = await negotiationResponse.text();
        console.error('‚ùå Ëá™Âãï‰∫§Ê∏âAPIÂ§±Êïó:', {
          status: negotiationResponse.status,
          error: errorText
        });
      }
      
    } catch (error) {
      console.error('‚ùå Êñ∞ÁùÄ„Çπ„É¨„ÉÉ„ÉâÂá¶ÁêÜ„Ç®„É©„Éº:', {
        error: error,
        message: error.message,
        stack: error.stack,
        „Çπ„É¨„ÉÉ„ÉâID: threadId
      });
    }
  };

  // Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆËøî‰ø°„ÇíÂá¶ÁêÜ
  const processExistingThreadReply = async (threadId: string) => {
    try {
      console.log('üîÑ Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆËøî‰ø°Ëá™Âãï‰∫§Ê∏âÈñãÂßã:', {
        „Çπ„É¨„ÉÉ„ÉâID: threadId,
        ÈñãÂßãÊôÇÂàª: new Date().toLocaleTimeString()
      });
      
      // „Çπ„É¨„ÉÉ„Éâ„ÅÆË©≥Á¥∞„ÇíÂèñÂæó
      console.log('üì® „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞ÂèñÂæó‰∏≠:', threadId);
      const threadResponse = await fetch(`/api/gmail/threads/${threadId}`);
      
      console.log('üì° „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞APIÂøúÁ≠î:', {
        status: threadResponse.status,
        ok: threadResponse.ok,
        statusText: threadResponse.statusText
      });
      
      if (!threadResponse.ok) {
        console.error('‚ùå „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞ÂèñÂæóÂ§±Êïó:', threadResponse.status);
        return;
      }
      
      const threadData = await threadResponse.json();
      
      // API„É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„ÅÆÂÆåÂÖ®„Å™Ë©≥Á¥∞Ë™øÊüª
      console.log(`üìä Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ ${threadId} „ÅÆAPI„É¨„Çπ„Éù„É≥„ÇπÂÆåÂÖ®ÊßãÈÄ†:`, {
        hasThread: !!threadData.thread,
        hasMessages: !!threadData.messages,
        threadKeysCount: threadData.thread ? Object.keys(threadData.thread).length : 0,
        directKeysCount: Object.keys(threadData).length,
        allKeys: Object.keys(threadData),
        threadObject: threadData.thread ? {
          threadKeys: Object.keys(threadData.thread),
          id: threadData.thread.id,
          hasMessages: !!threadData.thread.messages,
          messagesLength: threadData.thread.messages ? threadData.thread.messages.length : 0,
          historyId: threadData.thread.historyId,
          snippet: threadData.thread.snippet
        } : null,
        fullStructureSample: JSON.stringify(threadData, null, 2).substring(0, 1000) + '...'
      });
      
      // „É¨„Çπ„Éù„É≥„ÇπÊßãÈÄ†„Å´Âøú„Åò„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
      const actualThreadData = threadData.thread || threadData;
      const messages = actualThreadData.messages || [];
      
      console.log('üìß ÂèñÂæó„Åó„Åü„É°„ÉÉ„Çª„Éº„Ç∏ÊÉÖÂ†±:', {
        „É°„ÉÉ„Çª„Éº„Ç∏Êï∞: messages.length,
        „Çπ„É¨„ÉÉ„ÉâID: threadId,
        ‰ΩøÁî®„Åó„Åü„Éá„Éº„Çø„ÇΩ„Éº„Çπ: threadData.thread ? 'threadData.thread' : 'threadDataÁõ¥Êé•'
      });
      
      // „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅÆË©≥Á¥∞ÂàÜÊûê
      if (messages.length === 0) {
        console.error(`üîç „É°„ÉÉ„Çª„Éº„Ç∏ÂèñÂæóÂ§±Êïó„ÅÆË©≥Á¥∞ÂàÜÊûê - „Çπ„É¨„ÉÉ„Éâ ${threadId}:`, {
          threadDataExists: !!threadData.thread,
          threadDataKeys: threadData.thread ? Object.keys(threadData.thread) : [],
          messagesProperty: actualThreadData.messages,
          messagesType: typeof actualThreadData.messages,
          actualThreadDataKeys: Object.keys(actualThreadData),
          fullThreadData: threadData.thread || threadData
        });
        console.warn('‚ö†Ô∏è „É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì - Âá¶ÁêÜ„Çí‰∏≠Ê≠¢');
        return;
      }
      
      // ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæó
      const latestMessage = messages[messages.length - 1];
      const messageContent = extractMessageContent(latestMessage);
      const fromHeader = latestMessage.payload?.headers?.find(h => h.name === 'From')?.value || '';
      const subjectHeader = latestMessage.payload?.headers?.find(h => h.name === 'Subject')?.value || '';
      
      // Reply-To„Éò„ÉÉ„ÉÄ„Éº„Å®To„Éò„ÉÉ„ÉÄ„Éº„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ
      const replyToHeader = latestMessage.payload?.headers?.find(h => h.name === 'Reply-To')?.value || '';
      const toHeader = latestMessage.payload?.headers?.find(h => h.name === 'To')?.value || '';
      
      // Ëá™ÂàÜÂÆõ„É°„Éº„É´„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶ÁÑ°Èôê„É´„Éº„Éó„ÇíÈò≤„Åê
      const isFromSelf = fromHeader.includes('@gmail.com') && (
        fromHeader.includes('infumatch') || 
        fromHeader.includes('Ëá™ÂàÜ„ÅÆ„É°„Éº„É´„Éâ„É°„Ç§„É≥') // ÂÆüÈöõ„ÅÆ„Éâ„É°„Ç§„É≥„Å´ÁΩÆ„ÅçÊèõ„Åà
      );
      
      // Ëá™ÂãïÈÄÅ‰ø°„É°„Éº„É´„ÅÆÂèØËÉΩÊÄß„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const isAutoGenerated = fromHeader.includes('noreply') || 
                              fromHeader.includes('no-reply') ||
                              fromHeader.includes('mailer-daemon') ||
                              subjectHeader.includes('Delivery Status Notification') ||
                              subjectHeader.includes('Undelivered Mail');
      
      if (isFromSelf) {
        console.log('‚ö†Ô∏è Ëá™ÂàÜ„Åã„Çâ„ÅÆ„É°„Éº„É´„ÅÆ„Åü„ÇÅËá™ÂãïËøî‰ø°„Çí„Çπ„Ç≠„ÉÉ„Éó:', fromHeader);
        return;
      }
      
      if (isAutoGenerated) {
        console.log('‚ö†Ô∏è Ëá™ÂãïÈÄÅ‰ø°„É°„Éº„É´„ÅÆ„Åü„ÇÅËá™ÂãïËøî‰ø°„Çí„Çπ„Ç≠„ÉÉ„Éó:', fromHeader);
        return;
      }
      
      // Ëøî‰ø°ÂÖà„ÇíÊ±∫ÂÆöÔºàReply-ToÂÑ™ÂÖà„ÄÅ„Å™„Åë„Çå„Å∞FromÔºâ
      const replyToAddress = replyToHeader || fromHeader;
      
      console.log('üìß Ëøî‰ø°ÂÖàÊ±∫ÂÆö:', {
        From: fromHeader,
        ReplyTo: replyToHeader,
        To: toHeader,
        Ê±∫ÂÆö„Åï„Çå„ÅüËøî‰ø°ÂÖà: replyToAddress
      });
      
      console.log('üì¨ ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏Ë©≥Á¥∞:', {
        ÈÄÅ‰ø°ËÄÖ: fromHeader,
        ‰ª∂Âêç: subjectHeader,
        ÂÜÖÂÆπ„Éó„É¨„Éì„É•„Éº: messageContent.substring(0, 100) + '...',
        „É°„ÉÉ„Çª„Éº„Ç∏ID: latestMessage.id
      });
      
      // Ëá™Âãï‰∫§Ê∏âAPI„ÇíÂëº„Å≥Âá∫„Åó
      console.log('üöÄ Ëá™Âãï‰∫§Ê∏âAPIÂëº„Å≥Âá∫„ÅóÈñãÂßãÔºàÊó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËøî‰ø°Ôºâ');
      const negotiationPayload = {
        conversation_history: messages,
        new_message: messageContent,
        context: {
          auto_reply: true,
          thread_id: threadId,
          sender: fromHeader,
          subject: subjectHeader,
          is_existing_thread_reply: true  // Êó¢Â≠ò„Çπ„É¨„ÉÉ„Éâ„ÅÆËøî‰ø°„Åß„ÅÇ„Çã„Åì„Å®„ÇíÁ§∫„Åô„Éï„É©„Ç∞
        }
      };
      
      console.log('üì§ Ëá™Âãï‰∫§Ê∏âAPI„Éö„Ç§„É≠„Éº„Éâ:', {
        ‰ºöË©±Â±•Ê≠¥Êï∞: messages.length,
        Êñ∞ÁùÄ„É°„ÉÉ„Çª„Éº„Ç∏ÊñáÂ≠óÊï∞: messageContent.length,
        „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà: negotiationPayload.context
      });
      
      const negotiationResponse = await fetch('/api/v1/negotiation/continue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(negotiationPayload)
      });
      
      console.log('üì° Ëá™Âãï‰∫§Ê∏âAPIÂøúÁ≠î:', {
        status: negotiationResponse.status,
        ok: negotiationResponse.ok,
        statusText: negotiationResponse.statusText
      });
      
      if (negotiationResponse.ok) {
        const result = await negotiationResponse.json();
        console.log('‚úÖ Ëá™Âãï‰∫§Ê∏âÂÆå‰∫ÜÔºàÊó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâÔºâ:', {
          ÊàêÂäü: result.success,
          ÁîüÊàê„Åï„Çå„ÅüËøî‰ø°: result.content ? result.content.substring(0, 100) + '...' : '„Å™„Åó',
          Âá¶ÁêÜÊôÇÈñì: new Date().toLocaleTimeString()
        });
        
        // Ëøî‰ø°„ÅåÂøÖË¶Å„Åß„ÄÅ„Åã„Å§ÁîüÊàê„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøËá™ÂãïÈÄÅ‰ø°
        if (result.success && result.content && !result.metadata?.reply_not_needed && !result.metadata?.caution_required) {
          console.log('üì§ Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™ÂãïËøî‰ø°ÈÄÅ‰ø°ÈñãÂßã:', {
            „Çπ„É¨„ÉÉ„ÉâID: threadId,
            Ëøî‰ø°ÂÜÖÂÆπÊñáÂ≠óÊï∞: result.content.length,
            ÈÄÅ‰ø°ÂØæË±°: fromHeader
          });
          
          try {
            // 1. Ëøî‰ø°„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
            console.log('üìã Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæó‰∏≠...');
            const replyHeadersResponse = await fetch(`/api/gmail/threads/${threadId}/reply-headers?messageId=${latestMessage.id}`);
            
            let replyHeaders = null;
            if (replyHeadersResponse.ok) {
              const headerData = await replyHeadersResponse.json();
              replyHeaders = headerData.replyHeaders;
              console.log('‚úÖ Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæóÊàêÂäü:', replyHeaders);
            } else {
              console.warn('‚ö†Ô∏è Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÂèñÂæóÂ§±Êïó„ÄÅÂü∫Êú¨ÊÉÖÂ†±„ÅßÈÄÅ‰ø°„Åó„Åæ„Åô');
            }
            
            // 2. Ëøî‰ø°„É°„Éº„É´„ÇíÈÄÅ‰ø°
            console.log('üì® GmailÈÄÅ‰ø°APIÂëº„Å≥Âá∫„Åó‰∏≠...');
            const sendPayload = {
              to: replyToAddress,
              subject: subjectHeader.startsWith('Re: ') ? subjectHeader : `Re: ${subjectHeader}`,
              body: result.content,
              threadId: threadId,
              replyToMessageId: latestMessage.id,
              replyHeaders: replyHeaders
            };
            
            console.log('üì§ ÈÄÅ‰ø°„Éö„Ç§„É≠„Éº„Éâ:', {
              ÂÆõÂÖà: sendPayload.to,
              ‰ª∂Âêç: sendPayload.subject,
              Êú¨ÊñáÊñáÂ≠óÊï∞: sendPayload.body.length,
              „Çπ„É¨„ÉÉ„ÉâID: sendPayload.threadId,
              Ëøî‰ø°ÂÖà„É°„ÉÉ„Çª„Éº„Ç∏ID: sendPayload.replyToMessageId,
              „Éò„ÉÉ„ÉÄ„ÉºÊúâÁÑ°: !!sendPayload.replyHeaders
            });
            
            const sendResponse = await fetch('/api/gmail/send', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(sendPayload)
            });
            
            if (sendResponse.ok) {
              const sendResult = await sendResponse.json();
              console.log('‚úÖ Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™ÂãïËøî‰ø°ÈÄÅ‰ø°ÊàêÂäü!', {
                „É°„ÉÉ„Çª„Éº„Ç∏ID: sendResult.messageId,
                ÈÄÅ‰ø°ÂÆå‰∫ÜÊôÇÂàª: new Date().toLocaleTimeString(),
                ÂÆõÂÖà: sendPayload.to,
                ‰ª∂Âêç: sendPayload.subject
              });
            } else {
              const sendError = await sendResponse.text();
              console.error('‚ùå Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™ÂãïËøî‰ø°ÈÄÅ‰ø°Â§±Êïó:', {
                status: sendResponse.status,
                error: sendError,
                payload: sendPayload
              });
            }
            
          } catch (sendError) {
            console.error('‚ùå Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™ÂãïËøî‰ø°ÈÄÅ‰ø°‰∏≠„ÅÆ„Ç®„É©„Éº:', {
              error: sendError,
              message: sendError instanceof Error ? sendError.message : 'Unknown error',
              „Çπ„É¨„ÉÉ„ÉâID: threadId
            });
          }
        } else {
          console.log('‚ÑπÔ∏è Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™ÂãïËøî‰ø°„Çπ„Ç≠„ÉÉ„Éó:', {
            success: result.success,
            hasContent: !!result.content,
            replyNotNeeded: result.metadata?.reply_not_needed,
            cautionRequired: result.metadata?.caution_required,
            ÁêÜÁî±: result.metadata?.reply_not_needed ? 'Ëøî‰ø°‰∏çË¶Å„É°„Éº„É´' : 
                  result.metadata?.caution_required ? 'Ê≥®ÊÑè„ÅåÂøÖË¶Å„Å™„É°„Éº„É´' : 
                  !result.content ? '„Ç≥„É≥„ÉÜ„É≥„ÉÑÁîüÊàêÂ§±Êïó' : '„Åù„ÅÆ‰ªñ'
          });
        }
        
        // „Çπ„É¨„ÉÉ„Éâ„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        console.log('üîÑ Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™Âãï‰∫§Ê∏âÂæå„ÅÆ„Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞‰∏≠...');
        await loadThreads();
        console.log('‚úÖ Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™Âãï‰∫§Ê∏âÂæå„ÅÆ„Çπ„É¨„ÉÉ„Éâ„É™„Çπ„ÉàÊõ¥Êñ∞ÂÆå‰∫Ü');
      } else {
        const errorText = await negotiationResponse.text();
        console.error('‚ùå Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËá™Âãï‰∫§Ê∏âAPIÂ§±Êïó:', {
          status: negotiationResponse.status,
          error: errorText
        });
      }
      
    } catch (error) {
      console.error('‚ùå Êó¢Â≠ò„Çπ„É¨„ÉÉ„ÉâËøî‰ø°Âá¶ÁêÜ„Ç®„É©„Éº:', {
        error: error,
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : 'No stack',
        „Çπ„É¨„ÉÉ„ÉâID: threadId
      });
    }
  };
  
  // „É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ„ÇíÊäΩÂá∫„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
  const extractMessageContent = (message: any) => {
    // Gmail API„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ÊßãÈÄ†„Åã„ÇâÊú¨Êñá„ÇíÊäΩÂá∫
    const payload = message.payload || {};
    
    const decodeBase64Utf8 = (data: string) => {
      try {
        // Gmail API„ÅÆbase64urlÂΩ¢Âºè„ÇíÊ®ôÊ∫ñ„ÅÆbase64„Å´Â§âÊèõ
        const base64 = data.replace(/-/g, '+').replace(/_/g, '/');
        // UTF-8„Å®„Åó„Å¶Ê≠£„Åó„Åè„Éá„Ç≥„Éº„Éâ
        const decoded = atob(base64);
        return decodeURIComponent(escape(decoded));
      } catch (error) {
        console.warn('Base64„Éá„Ç≥„Éº„Éâ„Ç®„É©„Éº:', error);
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å®„Åó„Å¶ÈÄöÂ∏∏„ÅÆatob„Çí‰ΩøÁî®
        return atob(data.replace(/-/g, '+').replace(/_/g, '/'));
      }
    };
    
    if (payload.body?.data) {
      return decodeBase64Utf8(payload.body.data);
    }
    if (payload.parts) {
      for (const part of payload.parts) {
        if (part.mimeType === 'text/plain' && part.body?.data) {
          return decodeBase64Utf8(part.body.data);
        }
      }
    }
    return message.snippet || '';
  };
  
  // „Ç®„Éº„Ç∏„Çß„É≥„ÉàÁä∂Ê≥Å„Å®„Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà
  interface ProcessingStep {
    time: string;
    status: string;
    detail: string;
    reasoning?: string; // AI„ÅÆÊÄùËÄÉÈÅéÁ®ã
    stepNumber: number; // 1-4„ÅÆÊÆµÈöéÁï™Âè∑
    progressPercent: number; // ÈÄ≤ÊçóÁéá (0-100)
    agentType?: string; // Âá¶ÁêÜ‰∏≠„ÅÆ„Ç®„Éº„Ç∏„Çß„É≥„Éà„Çø„Ç§„Éó
    duration?: number; // Âá¶ÁêÜÊôÇÈñìÔºà„Éü„É™ÁßíÔºâ
    confidence?: number; // ‰ø°È†ºÂ∫¶ (0-1)
    isCompleted: boolean; // ÂÆå‰∫Ü„Éï„É©„Ç∞
  }

  // 5ÊÆµÈöé„ÅÆ„Ç∑„É≥„Éó„É´„Çπ„ÉÜ„ÉÉ„ÉóÂÆöÁæ©
  const PROCESSING_STAGES = [
    { 
      number: 1, 
      name: 'üìä „Çπ„É¨„ÉÉ„ÉâÂàÜÊûê', 
      description: '„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÂàÜÊûê„Åó„ÄÅÁèæÂú®„ÅÆ‰∫§Ê∏âÁä∂Ê≥Å„ÇíÊääÊè°„Åó„Å¶„ÅÑ„Åæ„Åô',
      progressTarget: 20
    },
    { 
      number: 2, 
      name: 'üß† Êà¶Áï•Á´ãÊ°à', 
      description: '„Ç´„Çπ„Çø„É†ÊåáÁ§∫„Å®‰ºÅÊ•≠Ë®≠ÂÆö„ÇíËÄÉÊÖÆ„Åó„Å¶Ëøî‰ø°Êà¶Áï•„ÇíÁ´ãÊ°à„Åó„Å¶„ÅÑ„Åæ„Åô',
      progressTarget: 40
    },
    { 
      number: 3, 
      name: 'üîç ÂÜÖÂÆπË©ï‰æ°', 
      description: 'Êà¶Áï•ÂÜÖÂÆπ„ÅÆÈÅ©ÂàáÊÄß„ÇíË©ï‰æ°„Åó„ÄÅ„É™„Çπ„ÇØË¶ÅÂõ†„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„ÅÑ„Åæ„Åô',
      progressTarget: 60
    },
    { 
      number: 4, 
      name: 'üé® „Éë„Çø„Éº„É≥ÁîüÊàê', 
      description: '3„Å§„ÅÆÁï∞„Å™„Çã„Ç¢„Éó„É≠„Éº„ÉÅ„ÅßËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô',
      progressTarget: 80
    },
    { 
      number: 5, 
      name: 'üíå Âü∫Êú¨Ëøî‰ø°ÔºÜÁêÜÁî±ÁîüÊàê', 
      description: 'AIÂü∫Êú¨Ëøî‰ø°„Å®ÈÅ∏ÊäûÁêÜÁî±„ÇíGemini„ÅßÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô',
      progressTarget: 100
    }
  ];
  
  const [agentStatus, setAgentStatus] = useState<string>('ÂæÖÊ©ü‰∏≠');
  const [processingSteps, setProcessingSteps] = useState<ProcessingStep[]>([]);
  const [customPrompt, setCustomPrompt] = useState<string>('');
  const [showCustomPrompt, setShowCustomPrompt] = useState(false);
  
  // Êñ∞Ë¶è„É°„Éº„É´‰ΩúÊàêÁî®„ÅÆÁä∂ÊÖã
  const [isComposingNew, setIsComposingNew] = useState(false);
  const [newEmailTo, setNewEmailTo] = useState('');
  const [newEmailSubject, setNewEmailSubject] = useState('');
  const [newEmailBody, setNewEmailBody] = useState('');
  const [isSendingNewEmail, setIsSendingNewEmail] = useState(false);
  
  // „É™„Ç¢„É´„Çø„Ç§„É†GmailÊ©üËÉΩ (temporarily disabled)
  // const {
  //   threads: realtimeThreads,
  //   isLoading: isRealtimeLoading,
  //   lastUpdated,
  //   newThreadsCount,
  //   refresh: refreshRealtime,
  //   resetNewCount,
  //   isPolling,
  //   startPolling,
  //   stopPolling,
  // } = useRealtimeGmail(threads, {
  //   pollInterval: 30000, // 30ÁßíÈñìÈöî
  //   enableNotifications: true,
  //   autoRefresh: true,
  // });

  // Mock values for disabled functionality
  const realtimeThreads = threads;
  const isRealtimeLoading = false;
  const lastUpdated = new Date();
  const newThreadsCount = 0;
  const refreshRealtime = () => {};
  const resetNewCount = () => {};
  const isPolling = false;
  const startPolling = () => {};
  const stopPolling = () => {};

  // GmailÁõ£Ë¶ñ„ÅÆÂÆöÊúüÂÆüË°å
  useEffect(() => {
    let intervalId: NodeJS.Timeout;
    
    console.log('üìã GmailÁõ£Ë¶ñuseEffectÂÆüË°å:', {
      Áõ£Ë¶ñÁä∂ÊÖã: gmailMonitoringActive,
      ÂâçÂõû„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„É¨„ÉÉ„Éâ: lastThreadCheck,
      ÁèæÂú®ÊôÇÂàª: new Date().toLocaleTimeString()
    });
    
    if (gmailMonitoringActive) {
      console.log('üîÑ GmailÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åô', {
        ÈñìÈöî: '60Áßí',
        ÁèæÂú®ÊôÇÂàª: new Date().toLocaleTimeString(),
        ÂàùÂõûÂÆüË°å: '„ÅÇ„Çä'
      });
      
      // ÂÆöÊúüÂÆüË°å„ÇíË®≠ÂÆö
      intervalId = setInterval(() => {
        console.log('‚è∞ GmailÁõ£Ë¶ñ„Çø„Ç§„Éû„ÉºÁô∫ÁÅ´ - checkForNewEmails()„ÇíÂÆüË°å');
        checkForNewEmails();
      }, 60000); // 60ÁßíÈñìÈöî
      
      // ÂàùÂõûÂÆüË°å
      console.log('üöÄ GmailÁõ£Ë¶ñÂàùÂõû„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å');
      checkForNewEmails();
    } else {
      console.log('‚è∏Ô∏è GmailÁõ£Ë¶ñ„ÅØÁÑ°Âäπ - ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØ„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„Åæ„Åô');
    }
    
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
        console.log('‚èπÔ∏è GmailÁõ£Ë¶ñÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', {
          ÂÅúÊ≠¢ÊôÇÂàª: new Date().toLocaleTimeString()
        });
      }
    };
  }, [gmailMonitoringActive, lastThreadCheck]);

  useEffect(() => {
    setIsVisible(true);
    checkAuth();
    
    // ÂàùÊúüÁä∂ÊÖã„Çí„É≠„Ç∞Âá∫Âäõ
    console.log('üìã „É°„ÉÉ„Çª„Éº„Ç∏„Éö„Éº„Ç∏ÂàùÊúüÂåñ:', {
      GmailÁõ£Ë¶ñÁä∂ÊÖã: gmailMonitoringActive,
      Ë™çË®ºÁä∂ÊÖã: isAuthenticated,
      ÊôÇÂàª: new Date().toLocaleTimeString()
    });

    // URL„Éë„É©„É°„Éº„Çø„Åã„Çâ„Ç≥„É©„ÉúÊèêÊ°àÊÉÖÂ†±„ÇíÂèñÂæó
    const to = searchParams.get('to');
    const subject = searchParams.get('subject');
    const body = searchParams.get('body');
    const influencer = searchParams.get('influencer');
    
    if (to || subject || body) {
      setIsComposingNew(true);
      setNewEmailTo(to || '');
      setNewEmailSubject(subject || '');
      setNewEmailBody(body || '');
    }

    // ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆ„Ç®„É©„Éº„Çí„Ç≠„É£„ÉÉ„ÉÅ
    const handleGlobalError = (event: ErrorEvent) => {
      // ChromeÊã°ÂºµÊ©üËÉΩ„ÅÆ„Ç®„É©„Éº„Çí„Çµ„Ç§„É¨„É≥„Éà„Å´Âá¶ÁêÜ
      if (event.filename?.includes('chrome-extension://')) {
        event.preventDefault();
        console.warn('Chrome extension error caught and ignored:', event.error);
        return true;
      }
    };

    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {
      // Promise rejection „ÅÆ„Ç®„É©„Éº„ÇÇ„Ç≠„É£„ÉÉ„ÉÅ
      if (event.reason?.stack?.includes('chrome-extension://')) {
        event.preventDefault();
        console.warn('Chrome extension promise rejection caught and ignored:', event.reason);
      }
    };

    window.addEventListener('error', handleGlobalError);
    window.addEventListener('unhandledrejection', handleUnhandledRejection);

    return () => {
      window.removeEventListener('error', handleGlobalError);
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
    };
  }, [searchParams]);

  useEffect(() => {
    if (isAuthenticated) {
      loadThreads();
    }
  }, [isAuthenticated]);
  
  // „É™„Ç¢„É´„Çø„Ç§„É†„Çπ„É¨„ÉÉ„Éâ„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„Çâ„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇÇÊõ¥Êñ∞
  useEffect(() => {
    if (realtimeThreads.length > 0) {
      setThreads(realtimeThreads);
    }
  }, [realtimeThreads]);

  useEffect(() => {
    if (selectedThread) {
      loadThreadDetails(selectedThread);
    }
  }, [selectedThread]);

  // Ëá™ÂãïÁîüÊàê„ÅØÂâäÈô§ - ÊâãÂãï„Åß„ÅÆ„ÅøAIËøî‰ø°ÂÄôË£ú„ÇíÁîüÊàê„Åô„Çã„Çà„ÅÜ„Å´Â§âÊõ¥
  // useEffect(() => {
  //   if (currentThread && currentThread.messages && currentThread.messages.length > 0) {
  //     generateReplyPatterns();
  //   }
  // }, [currentThread]);

  const checkAuth = async () => {
    try {
      console.log('üîê Checking authentication...');
      const response = await fetch('/api/auth/session');
      const session = await response.json();
      
      console.log('Session response:', {
        hasUser: !!session?.user,
        userEmail: session?.user?.email,
        hasAccessToken: !!session?.accessToken,
        expires: session?.expires
      });
      
      const authenticated = !!(session?.user && session?.accessToken);
      setIsAuthenticated(authenticated);
      
      console.log('Authentication status:', authenticated);
      
      if (authenticated) {
        console.log('‚úÖ User is authenticated, will load threads');
      } else {
        console.log('‚ùå User is not authenticated');
      }
    } catch (error) {
      console.error('Ë™çË®ºÁ¢∫Ë™ç„Ç®„É©„Éº:', error);
      setIsAuthenticated(false);
    } finally {
      setIsLoading(false);
    }
  };

  const loadThreads = async () => {
    console.log('üìß loadThreads called');
    console.log('isAuthenticated:', isAuthenticated);
    
    if (!isAuthenticated) {
      console.log('‚ö†Ô∏è Not authenticated, skipping thread loading');
      return;
    }
    
    setIsLoadingThreads(true);
    try {
      let url = '/api/gmail/threads';
      
      // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÊ§úÁ¥¢API„Çí‰ΩøÁî®
      if (Object.keys(searchFilters).length > 0) {
        const params = new URLSearchParams();
        
        Object.entries(searchFilters).forEach(([key, value]) => {
          if (value !== undefined && value !== null && value !== '') {
            if (value instanceof Date) {
              params.append(key, value.toISOString().split('T')[0]);
            } else if (Array.isArray(value)) {
              params.append(key, value.join(','));
            } else {
              params.append(key, value.toString());
            }
          }
        });
        
        url = `/api/gmail/search?${params.toString()}`;
      }
      
      console.log('Making request to:', url);
      const response = await fetch(url);
      
      console.log('Response status:', response.status);
      console.log('Response ok:', response.ok);
      
      // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const authErrorHandled = await handleApiResponse(response);
      if (authErrorHandled) {
        console.log('Auth error handled, stopping');
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        console.log('Threads data received:', data);
        console.log('Number of threads:', data.threads?.length || 0);
        
        const newThreads = data.threads || [];
        console.log('Setting threads state to:', newThreads);
        setThreads(newThreads);
        
        console.log('‚úÖ Threads state updated successfully');
      } else {
        const errorText = await response.text();
        console.warn('Failed to load threads:', response.status, response.statusText, errorText);
      }
    } catch (error) {
      handleError(error);
      console.error('„Çπ„É¨„ÉÉ„ÉâË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    } finally {
      console.log('üìß loadThreads completed, setting loading to false');
      setIsLoadingThreads(false);
    }
  };
  
  // Ê§úÁ¥¢ÂÆüË°å
  const handleSearch = (filters: SearchFilters) => {
    setSearchFilters(filters);
    setShowSearch(false);
    loadThreads();
  };
  
  // Ê§úÁ¥¢„ÇØ„É™„Ç¢
  const handleClearSearch = () => {
    setSearchFilters({});
    loadThreads();
  };

  const loadThreadDetails = async (threadId: string) => {
    try {
      const response = await fetch(`/api/gmail/threads/${threadId}`);
      
      // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const authErrorHandled = await handleApiResponse(response);
      if (authErrorHandled) {
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        setCurrentThread(data.thread);
      }
    } catch (error) {
      console.error('„Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
    }
  };

  // Âá¶ÁêÜÈñãÂßãÊôÇÂàª„ÇíË®òÈå≤
  const [processingStartTime, setProcessingStartTime] = useState<number>(0);
  const [currentStageIndex, setCurrentStageIndex] = useState<number>(0);

  const updateAgentStatus = (
    status: string, 
    detail?: string, 
    reasoning?: string, 
    stepNumber?: number,
    agentType?: string,
    confidence?: number
  ) => {
    setAgentStatus(status);
    
    if (detail) {
      const now = Date.now();
      const duration = processingStartTime > 0 ? now - processingStartTime : 0;
      
      // „Çπ„ÉÜ„ÉÉ„ÉóÁï™Âè∑„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØËá™ÂãïÂà§ÂÆö
      const actualStepNumber = stepNumber || (currentStageIndex + 1);
      const stage = PROCESSING_STAGES.find(s => s.number === actualStepNumber);
      const progressPercent = stage?.progressTarget || Math.min((actualStepNumber / 4) * 100, 100);
      
      setProcessingSteps(prev => [...prev, {
        time: new Date().toLocaleTimeString(),
        status: status,
        detail: detail,
        reasoning: reasoning,
        stepNumber: actualStepNumber,
        progressPercent: progressPercent,
        agentType: agentType,
        duration: duration,
        confidence: confidence,
        isCompleted: actualStepNumber === 4
      }]);
      
      // ÁèæÂú®„ÅÆÊÆµÈöé„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇíÊõ¥Êñ∞
      if (stepNumber && stepNumber > currentStageIndex) {
        setCurrentStageIndex(stepNumber);
      }
    }
  };

  const startProcessing = () => {
    setProcessingStartTime(Date.now());
    setCurrentStageIndex(0);
    setProcessingSteps([]);
  };

  const completeProcessing = () => {
    updateAgentStatus(
      '‚úÖ Âá¶ÁêÜÂÆå‰∫Ü', 
      '3„Å§„ÅÆËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü', 
      '„Ç∑„É≥„Éó„É´4„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂçîË™ø„Å´„Çà„ÇãÂäπÁéáÁöÑ„Å™ÂøúÁ≠îÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü',
      4,
      'SimpleNegotiationManager',
      0.95
    );
  };

  const generateReplyPatterns = async () => {
    if (!currentThread || !currentThread.messages || currentThread.messages.length === 0) return;
    
    setIsGeneratingPatterns(true);
    setReplyPatterns([]);
    setThreadAnalysis(null);
    startProcessing(); // Âá¶ÁêÜÈñãÂßãÊôÇÂàª„ÇíË®òÈå≤
    
    try {
      // ÊÆµÈöé1: „Çπ„É¨„ÉÉ„ÉâÂàÜÊûê
      updateAgentStatus(
        'üìä „Çπ„É¨„ÉÉ„ÉâÂàÜÊûê', 
        '„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíÂàÜÊûê„Åó„ÄÅÁèæÂú®„ÅÆ‰∫§Ê∏âÁä∂Ê≥Å„ÇíÊääÊè°„Åó„Å¶„ÅÑ„Åæ„Åô...', 
        '„Çπ„É¨„ÉÉ„ÉâÂàÜÊûê„Ç®„Éº„Ç∏„Çß„É≥„Éà„Åå„É°„ÉÉ„Çª„Éº„Ç∏Â±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø„ÄÅ‰∫§Ê∏âÊÆµÈöé„ÉªÁõ∏Êâã„ÅÆÊÑüÊÉÖ„ÉªÊá∏Âøµ‰∫ãÈ†Ö„ÇíÂàÜÊûê„Åó„Åæ„Åô',
        1,
        'ThreadAnalysisAgent',
        0.85
      );
      console.log('ü§ñ AI„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅåËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê‰∏≠...');
      
      // „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆ‰∫§Ê∏â„Ç®„Éº„Ç∏„Çß„É≥„ÉàAPI„ÇíÂëº„Å≥Âá∫„Åó
      // ÊúÄÊñ∞„ÅÆÊîπÂñÑÁâà„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÇíÂ∏∏„Å´‰ΩøÁî®Ôºà„É°„Éº„É´Á®ÆÂà•Âà§ÂÆö„Éª‰ºöË©±Â±•Ê≠¥ÂèÇÁÖßÊ©üËÉΩ‰ªò„ÅçÔºâ
      const apiUrl = 'https://infumatch-backend-269567634217.asia-northeast1.run.app';
      console.log('üîÑ ÊúÄÊñ∞ÊîπÂñÑÁâà„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Çí‰ΩøÁî®Ôºà„É°„Éº„É´Á®ÆÂà•Âà§ÂÆö„Éª‰ºöË©±Â±•Ê≠¥ÂèÇÁÖßÊ©üËÉΩÊê≠ËºâÔºâ');
      
      console.log('üîó ‰ΩøÁî®„Åô„ÇãAPI URL:', apiUrl);
      console.log('üîß Áí∞Â¢ÉÂ§âÊï∞ NEXT_PUBLIC_API_URL:', process.env.NEXT_PUBLIC_API_URL);
      
      // „Çπ„É¨„ÉÉ„Éâ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊï¥ÂΩ¢
      const threadMessages = currentThread.messages.map(message => ({
        id: message.id,
        sender: getMessageSender(message),
        content: getMessagePlainText(message),
        date: new Date(parseInt(message.internalDate)).toISOString(),
        subject: getMessageSubject(message)
      }));
      
      // „É™„ÇØ„Ç®„Çπ„Éà„Éá„Éº„Çø„ÇíÊ∫ñÂÇôÔºàorchestrated negotiation APIÁî®Ôºâ
      const requestData = {
        conversation_history: threadMessages.map(msg => ({
          role: msg.sender === 'InfuMatch' ? 'assistant' : 'user',
          content: msg.content
        })),
        new_message: threadMessages.length > 0 ? threadMessages[threadMessages.length - 1].content : '',
        context: {
          company_settings: {
            companyInfo: {
              companyName: "InfuMatch",
              contactPerson: "Áî∞‰∏≠ÁæéÂí≤",
              email: "tanaka@infumatch.com"
            },
            products: [
              { name: "ÂÅ•Â∫∑È£üÂìÅA" },
              { name: "ÁæéÂÆπ„ÇØ„É™„Éº„É†" }
            ]
          },
          custom_instructions: ""  // Âæå„ÅßÊõ¥Êñ∞
        }
      };
      
      console.log('üì§ APIÈÄÅ‰ø°„Éá„Éº„Çø:', JSON.stringify(requestData, null, 2));
      console.log('üìù „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà„ÅÆÁä∂ÊÖã:', customPrompt ? `„Äå${customPrompt}„Äç„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô` : 'Êú™Ë®≠ÂÆö');
      
      // ‰ºÅÊ•≠Ë®≠ÂÆö„ÇíÂèñÂæó - ÊÆµÈöé2„ÅÆÊ∫ñÂÇô
      updateAgentStatus(
        'üß† Êà¶Áï•Á´ãÊ°à', 
        '‰ºÅÊ•≠ÊÉÖÂ†±„ÉªÂïÜÊùêÊÉÖÂ†±„Éª„Ç´„Çπ„Çø„É†ÊåáÁ§∫„ÇíËÄÉÊÖÆ„Åó„Å¶Êà¶Áï•„ÇíÁ´ãÊ°à„Åó„Å¶„ÅÑ„Åæ„Åô...', 
        'Êà¶Áï•Á´ãÊ°à„Ç®„Éº„Ç∏„Çß„É≥„Éà„Åå‰ºÅÊ•≠Ë®≠ÂÆö„Å®„Ç´„Çπ„Çø„É†ÊåáÁ§∫„ÇíÁµ±Âêà„Åó„ÄÅÊúÄÈÅ©„Å™Ëøî‰ø°Êà¶Áï•„ÇíËÄÉÊ°à„Åó„Åæ„Åô',
        2,
        'ReplyStrategyAgent',
        0.90
      );
      let companySettings = {};
      try {
        const settingsResponse = await fetch('/api/settings');
        if (settingsResponse.ok) {
          const settingsData = await settingsResponse.json();
          companySettings = settingsData.data || {};
          console.log('üè¢ ‰ºÅÊ•≠Ë®≠ÂÆö„ÇíÂèñÂæó:', companySettings);
          console.log('üîç Ë®≠ÂÆöAPIÂøúÁ≠îÂÖ®‰Ωì:', settingsData);
          
          // Ë®≠ÂÆö„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
          const companyInfo = companySettings.companyInfo || {};
          const products = companySettings.products || [];
          const negotiationSettings = companySettings.negotiationSettings || {};
          
          console.log('üìã ‰ºÅÊ•≠Ë®≠ÂÆöË©≥Á¥∞:');
          console.log('  - ‰ºöÁ§æÂêç:', companyInfo.companyName);
          console.log('  - Ê•≠Áïå:', companyInfo.industry);
          console.log('  - ÂïÜÂìÅÊï∞:', products.length);
          console.log('  - ‰∫§Ê∏â„Éà„Éº„É≥:', negotiationSettings.preferredTone);
          console.log('  - ÈáçË¶Å‰∫ãÈ†Ö:', negotiationSettings.keyPriorities);
          console.log('  - ÈÅø„Åë„ÇãË©±È°å:', negotiationSettings.avoidTopics);
          
          // ÊÆµÈöé3: ÂÜÖÂÆπË©ï‰æ° (Ë®≠ÂÆöË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæå)
          updateAgentStatus(
            'üîç ÂÜÖÂÆπË©ï‰æ°', 
            `‰ºÅÊ•≠: ${companyInfo.companyName || 'Êú™Ë®≠ÂÆö'}, ÂïÜÊùê: ${products.length}‰ª∂„ÇíÂü∫„Å´Êà¶Áï•ÂÜÖÂÆπ„ÇíË©ï‰æ°‰∏≠`,
            `${companyInfo.companyName || '‰ºÅÊ•≠'}„ÅÆË®≠ÂÆö„ÇíÊääÊè°„Åó„ÄÅÁ´ãÊ°à„Åï„Çå„ÅüÊà¶Áï•„ÅÆÈÅ©ÂàáÊÄß„Å®„É™„Çπ„ÇØË¶ÅÂõ†„ÇíË©ï‰æ°„Åó„Åæ„Åô`,
            3,
            'ContentEvaluationAgent',
            0.85
          );
        } else {
          updateAgentStatus('‚ö†Ô∏è Ë®≠ÂÆöÂèñÂæóÂ§±Êïó', '‰ºÅÊ•≠Ë®≠ÂÆö„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', '„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅßÁ∂öË°å„Åó„Åæ„Åô');
        }
      } catch (e: any) {
        console.warn('‚ö†Ô∏è ‰ºÅÊ•≠Ë®≠ÂÆö„ÅÆÂèñÂæó„Å´Â§±Êïó:', e);
        updateAgentStatus('‚ö†Ô∏è Ë®≠ÂÆö„Ç®„É©„Éº', `‰ºÅÊ•≠Ë®≠ÂÆö„Ç®„É©„Éº: ${e.message || e}`, '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅÂá¶ÁêÜ„ÇíÁ∂öË°å„Åó„Åæ„Åô');
      }
      
      // ‰ºÅÊ•≠Ë®≠ÂÆö„ÇíÁµ±Âêà
      if (companySettings.companyInfo) {
        const companyInfo = companySettings.companyInfo;
        requestData.context.company_settings.companyInfo = {
          companyName: companyInfo.companyName || "InfuMatch",
          contactPerson: companyInfo.contactPerson || "Áî∞‰∏≠ÁæéÂí≤",
          industry: companyInfo.industry || "",
          employeeCount: companyInfo.employeeCount || "",
          website: companyInfo.website || "",
          description: companyInfo.description || "",
          contactEmail: companyInfo.contactEmail || ""
        };
      }
      
      // ÂïÜÂìÅÊÉÖÂ†±„ÇíËøΩÂä†
      if (companySettings.products && companySettings.products.length > 0) {
        requestData.context.company_settings.products = companySettings.products;
      }
      
      // ‰∫§Ê∏âË®≠ÂÆö„ÇíËøΩÂä†
      if (companySettings.negotiationSettings) {
        const negSettings = companySettings.negotiationSettings;
        requestData.context.company_settings.negotiationSettings = {
          preferredTone: negSettings.preferredTone || "professional",
          responseTimeExpectation: negSettings.responseTimeExpectation || "normal",
          budgetFlexibility: negSettings.budgetFlexibility || "moderate",
          decisionMakers: negSettings.decisionMakers || [],
          communicationPreferences: negSettings.communicationPreferences || [],
          specialInstructions: negSettings.specialInstructions || "",
          keyPriorities: negSettings.keyPriorities || [],
          avoidTopics: negSettings.avoidTopics || []
        };
      }
      
      // „Éû„ÉÉ„ÉÅ„É≥„Ç∞Ë®≠ÂÆö„ÇíËøΩÂä†
      if (companySettings.matchingSettings) {
        const matchSettings = companySettings.matchingSettings;
        requestData.context.company_settings.matchingSettings = {
          priorityCategories: matchSettings.priorityCategories || [],
          minSubscribers: matchSettings.minSubscribers || 0,
          maxSubscribers: matchSettings.maxSubscribers || 1000000,
          minEngagementRate: matchSettings.minEngagementRate || 0,
          excludeCategories: matchSettings.excludeCategories || [],
          geographicFocus: matchSettings.geographicFocus || [],
          priorityKeywords: matchSettings.priorityKeywords || [],
          excludeKeywords: matchSettings.excludeKeywords || []
        };
      }
      
      // „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà„ÇíËøΩÂä†
      if (customPrompt.trim()) {
        updateAgentStatus(
          'üìù „Ç´„Çπ„Çø„É†ÊåáÁ§∫ÈÅ©Áî®', 
          `„É¶„Éº„Ç∂„ÉºÊåáÁ§∫: "${customPrompt}"`, 
          `„Ç´„Çπ„Çø„É†ÊåáÁ§∫„Äå${customPrompt}„Äç„Çí‰∫§Ê∏âÊà¶Áï•„Å´ÁµÑ„ÅøËæº„Åø„Åæ„Åô„ÄÇ„Åì„ÅÆÊåáÁ§∫„ÇíÂÑ™ÂÖàÁöÑ„Å´ËÄÉÊÖÆ„Åó„Å¶Ëøî‰ø°„ÇíË™øÊï¥„Åó„Åæ„Åô`,
          2,
          'CustomizationAgent',
          0.90
        );
        requestData.context.custom_instructions = customPrompt.trim();
        console.log('üìù „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„Éà„ÇíÈÅ©Áî®:', customPrompt);
      }
      
      // ÊÆµÈöé4: „Éë„Çø„Éº„É≥ÁîüÊàê
      const threadSubject = currentThread.messages[0] ? getMessageSubject(currentThread.messages[0]) : 'No Subject';
      const messageCount = currentThread.messages.length;
      const lastSender = threadMessages[threadMessages.length - 1]?.sender || '‰∏çÊòé';
      
      updateAgentStatus(
        'üé® „Éë„Çø„Éº„É≥ÁîüÊàê', 
        `${messageCount}‰ª∂„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂü∫„Å´3„Å§„ÅÆËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê‰∏≠...`, 
        `${lastSender}„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Å´ÂØæ„Åó„ÄÅÂçîË™øÁöÑ„Éª‰∏≠Á´ã„Éª‰∏ªÂºµÁöÑ„ÅÆ3„Å§„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„ÅßËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Åæ„Åô`,
        4,
        'PatternGenerationAgent',
        0.80
      );
      
      // Êñ∞„Åó„ÅÑ4„Ç®„Éº„Ç∏„Çß„É≥„ÉàÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†API„Çí‰ΩøÁî®
      const fullUrl = `${apiUrl}/api/v1/negotiation/continue`;
      console.log('üåê „É™„ÇØ„Ç®„Çπ„ÉàÂÖàURL:', fullUrl);
      console.log('üéØ ‰ºÅÊ•≠Ë®≠ÂÆö„ÇíÊ¥ªÁî®„Åó„ÅüËøî‰ø°ÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô');
      console.log('üìù ÊúÄÁµÇÁöÑ„Å™„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà:', {
        has_company_settings: Object.keys(requestData.context.company_settings).length > 0,
        has_custom_instructions: !!requestData.context.custom_instructions,
        custom_instructions: requestData.context.custom_instructions || 'Ë®≠ÂÆö„Å™„Åó'
      });
      
      const response = await fetch(fullUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });
      
      console.log('üìä „É¨„Çπ„Éù„É≥„ÇπË©≥Á¥∞:');
      console.log('  - „Çπ„ÉÜ„Éº„Çø„Çπ:', response.status);
      console.log('  - „Çπ„ÉÜ„Éº„Çø„Çπ„ÉÜ„Ç≠„Çπ„Éà:', response.statusText);
      console.log('  - OK:', response.ok);
      console.log('  - URL:', response.url);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API„Ç®„É©„ÉºË©≥Á¥∞:', errorText);
        updateAgentStatus('‚ùå API„Ç®„É©„Éº', `${response.status}: ${errorText}`, 'API„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô');
        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('üì• APIÂøúÁ≠î:', result);
      
      // Ëøî‰ø°‰∏çË¶Å„ÉªÊ≥®ÊÑè„Éï„É©„Ç∞„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
      if (result.reply_not_needed) {
        updateAgentStatus(
          '‚ö†Ô∏è Ëøî‰ø°‰∏çË¶Å', 
          `${result.email_type}„Å®„Åó„Å¶Âà§ÂÆö„Åï„Çå„Åæ„Åó„Åü`, 
          `ÁêÜÁî±: ${result.reason}`
        );
        setReplyPatterns([{
          approach: 'system_message',
          content: result.message,
          tone: 'informational',
          isSystemMessage: true
        }]);
        setAiBasicReply(result.message);
        setAiReplyReasoning(result.reason);
        return;
      }
      
      if (result.caution_required) {
        updateAgentStatus(
          '‚ö†Ô∏è Ëøî‰ø°Ê≥®ÊÑè', 
          `${result.email_type}„Å®„Åó„Å¶Âà§ÂÆö„Åï„Çå„Åæ„Åó„Åü`, 
          `ÁêÜÁî±: ${result.reason}`
        );
        setReplyPatterns([{
          approach: 'caution_message',
          content: result.message,
          tone: 'warning',
          isSystemMessage: true
        }]);
        setAiBasicReply(result.message);
        setAiReplyReasoning(result.reason);
        return;
      }
      
      // Ë©≥Á¥∞„Éà„É¨„Éº„ÇπÊÉÖÂ†±„ÇíË°®Á§∫ÔºàÊñ∞Ê©üËÉΩÔºâ
      if (result.detailed_trace) {
        console.log('üîç === 4„Ç®„Éº„Ç∏„Çß„É≥„ÉàË©≥Á¥∞„Éà„É¨„Éº„Çπ ===');
        const trace = result.detailed_trace;
        
        // ÂêÑ„Çπ„ÉÜ„Éº„Ç∏„ÅÆË©≥Á¥∞
        trace.processing_stages?.forEach((stage: any, index: number) => {
          console.log(`üé≠ Stage ${stage.stage}: ${stage.name}`);
          console.log(`   ‚è±Ô∏è Âá¶ÁêÜÊôÇÈñì: ${stage.duration.toFixed(2)}Áßí`);
          console.log(`   ‚úÖ „Çπ„ÉÜ„Éº„Çø„Çπ: ${stage.status}`);
        });
        
        // ‰∏≠ÈñìÁîüÊàêÁâ©„ÅÆË©≥Á¥∞
        console.log('üìä === ‰∏≠ÈñìÁîüÊàêÁâ© ===');
        if (trace.intermediate_outputs?.thread_analysis) {
          console.log('üìã „Çπ„É¨„ÉÉ„ÉâÂàÜÊûêÁµêÊûú:', trace.intermediate_outputs.thread_analysis);
        }
        if (trace.intermediate_outputs?.strategy_plan) {
          console.log('üß† Êà¶Áï•Á´ãÊ°àÁµêÊûú:', trace.intermediate_outputs.strategy_plan);
        }
        if (trace.intermediate_outputs?.evaluation_result) {
          console.log('üîç ÂÜÖÂÆπË©ï‰æ°ÁµêÊûú:', trace.intermediate_outputs.evaluation_result);
        }
        if (trace.intermediate_outputs?.patterns_result) {
          console.log('üé® „Éë„Çø„Éº„É≥ÁîüÊàêÁµêÊûú:', Object.keys(trace.intermediate_outputs.patterns_result));
        }
        
        // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à
        if (trace.performance_metrics) {
          console.log('‚ö° === „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à ===');
          console.log(`   üèÉ Á∑èÂá¶ÁêÜÊôÇÈñì: ${trace.performance_metrics.total_duration.toFixed(2)}Áßí`);
          console.log(`   üìà Âá¶ÁêÜÂäπÁéá: ${trace.performance_metrics.throughput}`);
          console.log('   üìä „Çπ„ÉÜ„Éº„Ç∏Âà•Âá¶ÁêÜÊôÇÈñì:');
          Object.entries(trace.performance_metrics.stage_durations).forEach(([stage, duration]: [string, any]) => {
            console.log(`      ${stage}: ${duration.toFixed(2)}Áßí`);
          });
        }
        
        // Ë©≥Á¥∞„Éà„É¨„Éº„ÇπÊÉÖÂ†±„Çístate„Å´‰øùÂ≠ò
        setDetailedTrace(trace);
      }
      
      // APIÂøúÁ≠î„ÇíÂèó‰ø°
      updateAgentStatus(
        'üì• ÂøúÁ≠îÂèó‰ø°', 
        'AIÂøúÁ≠î„ÇíÂèó‰ø°„Åó„ÄÅ„Éë„Çø„Éº„É≥ÁµêÊûú„ÇíÂá¶ÁêÜ‰∏≠...', 
        '„Ç∑„É≥„Éó„É´4„Ç®„Éº„Ç∏„Çß„É≥„Éà„Ç∑„Çπ„ÉÜ„É†„Åã„Çâ„ÅÆÂøúÁ≠î„ÇíËß£Êûê„Åó„ÄÅÁîüÊàê„Åï„Çå„Åü3„Å§„ÅÆ„Éë„Çø„Éº„É≥„ÇíÂá¶ÁêÜ„Åó„Å¶„ÅÑ„Åæ„Åô',
        4,
        'SimpleNegotiationManager',
        0.85
      );

      // AIÊÄùËÄÉÈÅéÁ®ã„ÅÆË©≥Á¥∞Ë°®Á§∫ („Ç™„Éº„Ç±„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥ÂØæÂøú)
      const aiThinking = result.ai_thinking || {};
      const orchestrationDetails = result.orchestration_details || {};
      const metadata = result.metadata || {};
      
      // 4ÊÆµÈöé„Ç∑„Çπ„ÉÜ„É†„Åß„ÅÆÊúÄÁµÇÂá¶ÁêÜ
      if (metadata.processing_type === 'simple_4_agent') {
        updateAgentStatus(
          '‚úÖ Âá¶ÁêÜÂÆå‰∫Ü', 
          `4„Å§„ÅÆ„Ç∑„É≥„Éó„É´„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´„Çà„ÇãÂäπÁéáÁöÑ„Å™ÂøúÁ≠îÁîüÊàêÂÆå‰∫Ü`, 
          aiThinking.orchestration_summary || '„Ç∑„É≥„Éó„É´4„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂçîË™ø„Å´„Çà„ÇãÂäπÁéáÁöÑ„Å™ÂøúÁ≠î„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü',
          4,
          'SimpleNegotiationManager',
          0.95
        );
      } else {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊôÇ„ÅÆË°®Á§∫
        updateAgentStatus(
          '‚úÖ Âá¶ÁêÜÂÆå‰∫Ü', 
          '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇãÂøúÁ≠îÁîüÊàêÂÆå‰∫Ü', 
          `${aiThinking.processing_note || 'AIÂá¶ÁêÜÂÆå‰∫Ü'} ‚Üí ${aiThinking.reason || 'Ê®ôÊ∫ñÂøúÁ≠îÁîüÊàê'}`,
          4,
          'FallbackAgent',
          0.80
        );
      }
      
      // AIÂàÜÊûê„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
      console.log('üß† AIË©≥Á¥∞ÂàÜÊûêÁµêÊûú:', aiThinking);
      console.log('üé≠ „Ç™„Éº„Ç±„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥Ë©≥Á¥∞:', orchestrationDetails);
      console.log('üìÑ AIÁîüÊàêÂü∫Êú¨Ëøî‰ø°:', result.content);
      
      // ÂæìÊù•„ÅÆAIÊÄùËÄÉÈÅéÁ®ã„ÇÇË°®Á§∫Ôºà‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÔºâ
      if (aiThinking.message_analysis) {
        updateAgentStatus('üîç „É°„ÉÉ„Çª„Éº„Ç∏ÁêÜËß£', aiThinking.message_analysis, 
          aiThinking.detected_intent || '„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊÑèÂõ≥„ÇíÂàÜÊûê„Åó„Åæ„Åó„Åü');
      }
      
      if (aiThinking.sentiment_analysis) {
        updateAgentStatus('üí≠ ÊÑüÊÉÖ„Éª„Éà„Éº„É≥ÂàÜÊûê', aiThinking.sentiment_analysis, 
          aiThinking.negotiation_stage || '‰∫§Ê∏âÊÆµÈöé„ÇíÂà§ÂÆö„Åó„Åæ„Åó„Åü');
      }
      
      if (aiThinking.custom_instructions_impact) {
        updateAgentStatus('‚öôÔ∏è „Ç´„Çπ„Çø„É†ÊåáÁ§∫ÈÅ©Áî®', aiThinking.custom_instructions_impact, 
          '„É¶„Éº„Ç∂„Éº„ÅÆÊåáÁ§∫„Å´Âü∫„Å•„ÅÑ„Å¶ÂøúÁ≠î„Çí„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Åó„Åæ„Åó„Åü');
      }
      
      if (result.success) {
        // AI„Åã„ÇâËøî„Åï„Çå„ÅüÂü∫Êú¨Ëøî‰ø°„ÇíÂü∫„Å´„ÄÅ3„Å§„ÅÆÁï∞„Å™„ÇãÁâπÂæ¥„ÇíÊåÅ„Å§„Éë„Çø„Éº„É≥„ÇíÁîüÊàê
        const baseReply = result.content || 'AIÂøúÁ≠î„ÅåÁîüÊàê„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü';
        const contact = getThreadPrimaryContact(currentThread);
        
        // Âü∫Êú¨ÁöÑ„Å™ÂàÜÊûêÁµêÊûú„ÇíÂèñÂæó
        const basicMetadata = result.metadata || {};
        console.log('üîç ‰∫§Ê∏â„Ç®„Éº„Ç∏„Çß„É≥„ÉàÂàÜÊûêÁµêÊûú:', basicMetadata);
        console.log(`ü§ñ AIÂü∫Êú¨Ëøî‰ø°: "${baseReply.substring(0, 50)}..."`);
        
        // 4„Ç®„Éº„Ç∏„Çß„É≥„Éà„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„Çã3„Éë„Çø„Éº„É≥ÊßãÁØâ
        updateAgentStatus(
          'üé® Gemini 3„Éë„Çø„Éº„É≥ÁîüÊàêÂÆå‰∫Ü', 
          'Gemini„Åå3„Å§„ÅÆÁï∞„Å™„Çã„Éà„Éº„É≥„ÅßËøî‰ø°„ÇíÁõ¥Êé•ÁîüÊàê„Åó„Åæ„Åó„Åü', 
          'ÂçîË™øÁöÑ„Éª„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Éª„Éï„Ç©„Éº„Éû„É´„ÅÆ3„Éë„Çø„Éº„É≥„ÇíGemini„ÅåÁîüÊàê',
          4,
          'GeminiDirectGeneration',
          0.95
        );
        
        let patterns = [];
        
        // 4„Ç®„Éº„Ç∏„Çß„É≥„Éà„Ç∑„Çπ„ÉÜ„É†„ÅÆÁµêÊûú„Åã„Çâ3„Éë„Çø„Éº„É≥„ÇíÊßãÁØâ
        if (result.patterns) {
          const patternsFromAPI = result.patterns;
          patterns = [
            // ÂçîË™øÁöÑ„Éë„Çø„Éº„É≥
            {
              pattern_type: patternsFromAPI.pattern_collaborative?.approach || 'collaborative',
              pattern_name: 'ÂçîË™øÁöÑ„ÉªË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ',
              tone: patternsFromAPI.pattern_collaborative?.tone || 'friendly_accommodating',
              content: patternsFromAPI.pattern_collaborative?.content || '„Éë„Çø„Éº„É≥ÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
              reasoning: 'AI„ÅåÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶ÂçîË™øÁöÑ„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ„Éà„Éº„É≥„ÅßÁîüÊàê',
              recommendation_score: 0.90
            },
            // „Éê„É©„É≥„ÇπÂûã„Éë„Çø„Éº„É≥  
            {
              pattern_type: patternsFromAPI.pattern_balanced?.approach || 'balanced',
              pattern_name: '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Éª„Éê„É©„É≥„ÇπÂûã',
              tone: patternsFromAPI.pattern_balanced?.tone || 'professional_polite',
              content: patternsFromAPI.pattern_balanced?.content || '„Éë„Çø„Éº„É≥ÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
              reasoning: 'AI„ÅåÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Åß‰∏≠Á´ãÁöÑ„Å™„Éà„Éº„É≥„ÅßÁîüÊàê',
              recommendation_score: 0.95
            },
            // „Éï„Ç©„Éº„Éû„É´„Éë„Çø„Éº„É≥
            {
              pattern_type: patternsFromAPI.pattern_formal?.approach || 'formal',
              pattern_name: 'Ê†ºÂºèÈ´ò„ÅÑ„ÉªÊ≠£Âºè',
              tone: patternsFromAPI.pattern_formal?.tone || 'highly_formal',
              content: patternsFromAPI.pattern_formal?.content || '„Éë„Çø„Éº„É≥ÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü',
              reasoning: 'AI„ÅåÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶Ê†ºÂºèÈ´ò„ÅèÊ≠£Âºè„Å™„Éà„Éº„É≥„ÅßÁîüÊàê',
              recommendation_score: 0.85
            }
          ];
        } else {
          // API„Åã„Çâ„Éë„Çø„Éº„É≥„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
          // baseReply„Å´„ÅØÊó¢„Å´ÁΩ≤Âêç„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅËøΩÂä†„ÅÆÁΩ≤Âêç„ÅØ‰∏çË¶Å
          patterns = [
            {
              pattern_type: 'collaborative',
              pattern_name: 'ÂçîË™øÁöÑ„ÉªË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ',
              tone: 'friendly_accommodating',
              content: `${contact}Êßò\n\n„ÅÑ„Å§„ÇÇ„Åä‰∏ñË©±„Å´„Å™„Å£„Å¶„Åä„Çä„Åæ„Åô„ÄÇ\n\n${baseReply}`,
              reasoning: '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÂçîË™øÁöÑ„Å™„Ç¢„Éó„É≠„Éº„ÉÅ',
              recommendation_score: 0.70
            },
            {
              pattern_type: 'balanced',
              pattern_name: '„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Éª„Éê„É©„É≥„ÇπÂûã',
              tone: 'professional_polite',
              content: `${contact}Êßò\n\n„ÅäÂøô„Åó„ÅÑ‰∏≠„ÅîÈÄ£Áµ°„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ\n\n${baseReply}`,
              reasoning: '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„Å™„Ç¢„Éó„É≠„Éº„ÉÅ',
              recommendation_score: 0.75
            },
            {
              pattern_type: 'formal',
              pattern_name: 'Ê†ºÂºèÈ´ò„ÅÑ„ÉªÊ≠£Âºè',
              tone: 'highly_formal',
              content: `${contact}Êßò\n\nÂπ≥Á¥†„Çà„Çä„Åä‰∏ñË©±„Å´„Å™„Å£„Å¶„Åä„Çä„Åæ„Åô„ÄÇ\n\n${baseReply}`,
              reasoning: '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Ê†ºÂºèÈ´ò„ÅÑ„Ç¢„Éó„É≠„Éº„ÉÅ',
              recommendation_score: 0.65
            }
          ];
        }
        
        const analysis = {
          thread_summary: `AI„Åå‰ºöË©±Â±•Ê≠¥„ÇíÂàÜÊûê: "${baseReply.substring(0, 50)}..."`,
          conversation_stage: basicMetadata.relationship_stage || '‰∫§Ê∏â„Ç®„Éº„Ç∏„Çß„É≥„Éà„Å´„Çà„ÇãÂàÜÊûêÂÆå‰∫Ü',
          recommended_approach: 'AI„ÅåÊé®Â•®„Åô„Çã3„Å§„ÅÆÁï∞„Å™„Çã„Ç¢„Éó„É≠„Éº„ÉÅ„Éë„Çø„Éº„É≥',
          sentiment: 'neutral',
          // Â∞ÜÊù•„ÅÆÈ´òÂ∫¶„Å™ÂàÜÊûêÊ©üËÉΩ„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
          success_probability: 0.75, // „Éá„É¢Áî®„ÅÆÂÄ§
          key_concerns: ['‰ºÅÊ•≠Ë®≠ÂÆö„ÅÆÊ¥ªÁî®', 'ÂäπÊûúÁöÑ„Å™„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥'],
          opportunities: ['AI‰∫§Ê∏â„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÅÆÊ¥ªÁî®', 'Êà¶Áï•ÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ'],
          risks: [],
          next_steps: ['Ëøî‰ø°„Éë„Çø„Éº„É≥„ÅÆÈÅ∏Êäû', 'ÂÄãÂà•„Ç´„Çπ„Çø„Éû„Ç§„Ç∫']
        };
        
        // ÊÆµÈöé7: ÂÆå‰∫Ü„ÉªÁµêÊûúÂá∫Âäõ
        updateAgentStatus(
          '‚úÖ ÂÆå‰∫Ü„ÉªÁµêÊûúÂá∫Âäõ', 
          `3„Å§„ÅÆËøî‰ø°„Éë„Çø„Éº„É≥„ÅåÁîüÊàê„Åï„Çå„Åæ„Åó„Åü`, 
          `ÂèãÂ•ΩÁöÑ„ÉªÁ©çÊ•µÁöÑ„ÄÅÊÖéÈáç„Éª„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÄÅ„Éì„Ç∏„Éç„ÇπÈáçË¶ñ„ÅÆ3„Éë„Çø„Éº„É≥„ÇíÁî®ÊÑè„Åó„Åæ„Åó„Åü„ÄÇ${customPrompt ? '„Ç´„Çπ„Çø„É†ÊåáÁ§∫„ÇÇÂèçÊò†Ê∏à„Åø„Åß„Åô„ÄÇ' : ''}Áä∂Ê≥Å„Å´Âøú„Åò„Å¶ÊúÄÈÅ©„Å™„ÇÇ„ÅÆ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ`,
          7,
          'NegotiationManager',
          0.95
        );
        console.log(`‚úÖ AIËøî‰ø°„ÇíÂü∫„Å´3„Å§„ÅÆ„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü: "${baseReply.substring(0, 50)}..."`);
        
        setReplyPatterns(patterns);
        setThreadAnalysis(analysis);
        
        // Êñ∞Ê©üËÉΩÔºöAIÁîüÊàêÂü∫Êú¨Ëøî‰ø°„Å®ÁêÜÁî±„ÇíË®≠ÂÆö
        if (result.basic_reply) {
          console.log('üíå AIÂü∫Êú¨Ëøî‰ø°„ÇíÂèó‰ø°:', result.basic_reply.substring(0, 50) + '...');
          setAiBasicReply(result.basic_reply);
        }
        
        if (result.reply_reasoning) {
          console.log('üß† Ëøî‰ø°ÁêÜÁî±„ÇíÂèó‰ø°:', result.reply_reasoning.substring(0, 50) + '...');
          setAiReplyReasoning(result.reply_reasoning);
        }
      } else {
        updateAgentStatus('‚ùå ÁîüÊàêÂ§±Êïó', result.error || 'APIËøî‰ø°„Åå‰∏çÊ≠£„Å™ÂΩ¢Âºè„Åß„Åô');
        throw new Error(result.error || 'APIËøî‰ø°„Åå‰∏çÊ≠£„Å™ÂΩ¢Âºè„Åß„Åô');
      }
      
    } catch (error: any) {
      console.error('‚ùå Ëøî‰ø°„Éë„Çø„Éº„É≥ÁîüÊàê„Ç®„É©„Éº:', error);
      updateAgentStatus(
        '‚ùå „Ç®„É©„ÉºÁô∫Áîü', 
        error.message || error.toString(), 
        '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åü„Åü„ÇÅ„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éë„Çø„Éº„É≥„Çí‰ΩøÁî®„Åó„Åæ„Åô',
        7,
        'ErrorHandler',
        0.30
      );
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Ç®„É©„ÉºÊôÇ„ÅØ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®
      console.log('üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®„Åó„Åæ„Åô');
      
      const fallbackPatterns = [
        {
          pattern_type: 'friendly_enthusiastic',
          pattern_name: 'ÂèãÂ•ΩÁöÑ„ÉªÁ©çÊ•µÁöÑ',
          tone: 'Ë¶™„Åó„Åø„ÇÑ„Åô„Åè„ÄÅÂâçÂêë„Åç„ÅßÂçîÂäõÁöÑ„Å™„Éà„Éº„É≥',
          content: `${getThreadPrimaryContact(currentThread)}Êßò

„ÅÑ„Å§„ÇÇ„Åä‰∏ñË©±„Å´„Å™„Å£„Å¶„Åä„Çä„Åæ„Åô„ÄÇInfuMatch„ÅÆÁî∞‰∏≠„Åß„Åô„ÄÇ

„ÅîÈÄ£Áµ°„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ
„Åú„Å≤Ë©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅäË©±„Åó„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ

„ÅäÊôÇÈñì„ÅÆ„ÅÇ„ÇãÈöõ„Å´„ÄÅ„ÅäÈõªË©±„ÇÑ„Éì„Éá„Ç™ÈÄöË©±„Åß„ÅäË©±„Åó„Åß„Åç„Çå„Å∞„Å®ÊÄù„ÅÑ„Åæ„Åô„Åå„ÄÅ„ÅÑ„Åã„Åå„Åß„Åó„Çá„ÅÜ„ÅãÔºü

„ÅäËøî‰∫ã„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ

„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
Áî∞‰∏≠`,
          reasoning: '„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥„Å´Á©çÊ•µÁöÑ„Åß„ÄÅÈñ¢‰øÇÊßãÁØâ„ÇíÈáçË¶ñ„Åô„Çã„Ç¢„Éó„É≠„Éº„ÉÅ',
          recommendation_score: 0.85
        },
        {
          pattern_type: 'cautious_professional',
          pattern_name: 'ÊÖéÈáç„Éª„Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´',
          tone: '‰∏ÅÂØß„ÅßÂ∞ÇÈñÄÁöÑ„ÄÅË©≥Á¥∞„ÇíÈáçË¶ñ„Åô„Çã„Éà„Éº„É≥',
          content: `${getThreadPrimaryContact(currentThread)}Êßò

„ÅäÂøô„Åó„ÅÑ‰∏≠„ÄÅ„ÅîÈÄ£Áµ°„ÅÑ„Åü„Å†„Åç„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ
InfuMatch„ÅÆÁî∞‰∏≠„Å®Áî≥„Åó„Åæ„Åô„ÄÇ

„ÅîÊèêÊ°à„ÅÑ„Åü„Å†„ÅÑ„Åü‰ª∂„Å´„Å§„ÅÑ„Å¶„ÄÅË©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åü„ÅèÊÄù„ÅÑ„Åæ„Åô„ÄÇ

„Éª„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂÖ∑‰ΩìÁöÑ„Å™ÂÜÖÂÆπ
„Éª„ÅîÂ∏åÊúõ„ÅÆ„Çπ„Ç±„Ç∏„É•„Éº„É´
„Éª„Åî‰∫àÁÆó„ÅÆÁØÑÂõ≤

„Å™„Å©„Å´„Å§„ÅÑ„Å¶„ÄÅ„ÅäËÅû„Åã„Åõ„ÅÑ„Åü„Å†„Åë„Åæ„Åô„Åß„Åó„Çá„ÅÜ„Åã„ÄÇ

„ÅîÊ§úË®é„ÅÆ„Åª„Å©„ÄÅ„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

Áî∞‰∏≠`,
          reasoning: '„É™„Çπ„ÇØ„ÇíÊúÄÂ∞èÈôê„Å´Êäë„Åà„ÄÅË©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÈÄ≤„ÇÅ„Åü„ÅÑÂ†¥Âêà',
          recommendation_score: 0.75
        },
        {
          pattern_type: 'business_focused',
          pattern_name: '„Éì„Ç∏„Éç„ÇπÈáçË¶ñ',
          tone: 'ÂäπÁéáÁöÑ„ÅßÁµêÊûúÈáçË¶ñ„ÄÅÂÖ∑‰ΩìÁöÑ„Å™ÊèêÊ°à„ÇíÂê´„ÇÄ„Éà„Éº„É≥',
          content: `${getThreadPrimaryContact(currentThread)}Êßò

InfuMatch„ÅÆÁî∞‰∏≠„Åß„Åô„ÄÇ

„ÅîÈÄ£Áµ°„ÅÑ„Åü„Å†„ÅÑ„Åü‰ª∂„Å´„Å§„ÅÑ„Å¶„ÄÅ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™ÂΩ¢„Åß„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Å®ËÄÉ„Åà„Å¶„Åä„Çä„Åæ„ÅôÔºö

1. ÂïÜÂìÅÁ¥π‰ªãÂãïÁîª„ÅÆÂà∂‰Ωú„Çµ„Éù„Éº„Éà
2. „Ç®„É≥„Ç≤„Éº„Ç∏„É°„É≥„ÉàÂàÜÊûê„É¨„Éù„Éº„Éà„ÅÆÊèê‰æõ
3. „Éï„Ç©„É≠„ÉØ„ÉºÂêë„Åë„Éó„É≠„É¢„Éº„Ç∑„Éß„É≥‰ºÅÁîª

„Åî‰∫àÁÆó„Å´Âøú„Åò„Å¶ÊúÄÈÅ©„Å™„Éó„É©„É≥„Çí„ÅîÊèêÊ°à„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
Êù•ÈÄ±„ÄÅ30ÂàÜÁ®ãÂ∫¶„ÅÆ„ÅäÊôÇÈñì„Çí„ÅÑ„Åü„Å†„Åë„Åæ„Åô„Åß„Åó„Çá„ÅÜ„ÅãÔºü

„ÅäËøî‰∫ã„Çí„ÅäÂæÖ„Å°„Åó„Å¶„Åä„Çä„Åæ„Åô„ÄÇ

Áî∞‰∏≠`,
          reasoning: 'ÂÖ∑‰ΩìÁöÑ„Å™‰æ°ÂÄ§ÊèêÊ°à„ÇíÁ§∫„Åó„ÄÅÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíÊòéÁ¢∫„Å´„Åó„Åü„ÅÑÂ†¥Âêà',
          recommendation_score: 0.90
        }
      ];
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü
      updateAgentStatus(
        '‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü', 
        '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü', 
        '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„Åå„ÄÅÊ®ôÊ∫ñÁöÑ„Å™Ëøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁî®ÊÑè„Åó„Åæ„Åó„Åü„ÄÇÊâãÂãï„ÅßË™øÊï¥„Åó„Å¶„ÅîÂà©Áî®„Åè„Å†„Åï„ÅÑ',
        7,
        'FallbackSystem',
        0.60
      );

      setReplyPatterns(fallbackPatterns);
      setThreadAnalysis({
        relationship_stage: 'initial_contact',
        emotional_tone: 'positive',
        urgency_level: 'normal',
        main_topics: ['„Ç≥„É©„Éú„É¨„Éº„Ç∑„Éß„É≥', 'ÂïÜÂìÅÁ¥π‰ªã', '„Éó„É≠„É¢„Éº„Ç∑„Éß„É≥'],
        note: '„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ„ÅßÁîüÊàêÔºàAIÂàÜÊûê„ÅØÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºâ'
      });
      
    } finally {
      setIsGeneratingPatterns(false);
    }
  };


  const handleLogout = async () => {
    try {
      await signOut({ 
        callbackUrl: '/',
        redirect: true 
      });
    } catch (error) {
      console.error('„É≠„Ç∞„Ç¢„Ç¶„Éà„Ç®„É©„Éº:', error);
    }
  };

  const handleSendNewEmail = async () => {
    if (!newEmailTo.trim() || !newEmailSubject.trim() || !newEmailBody.trim()) {
      alert('ÂÆõÂÖà„ÄÅ‰ª∂Âêç„ÄÅÊú¨Êñá„Çí„Åô„Åπ„Å¶ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      return;
    }

    setIsSendingNewEmail(true);
    try {
      // üîç DEBUG: Êñ∞Ë¶è„É°„Éº„É´ÈÄÅ‰ø°„Éá„Éº„Çø„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
      const newEmailData = {
        to: newEmailTo,
        subject: newEmailSubject,
        message: newEmailBody,
      };
      
      console.log('=== FRONTEND NEW EMAIL SEND DEBUG START ===');
      console.log('üìß New email data:', JSON.stringify(newEmailData, null, 2));
      console.log('üìß To:', newEmailTo);
      console.log('üìß Subject:', newEmailSubject);
      console.log('üìß Body:', newEmailBody);
      
      const response = await fetch('/api/gmail/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newEmailData),
      });

      // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const authErrorHandled = await handleApiResponse(response);
      if (authErrorHandled) {
        setIsSendingNewEmail(false);
        return;
      }

      if (response.ok) {
        const responseData = await response.json();
        console.log('‚úÖ New email send response:', responseData);
        console.log('=== FRONTEND NEW EMAIL SEND DEBUG END (SUCCESS) ===');
        
        alert('„É°„Éº„É´„ÅåÊ≠£Â∏∏„Å´ÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
        
        // „Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
        setNewEmailTo('');
        setNewEmailSubject('');
        setNewEmailBody('');
        setIsComposingNew(false);
        
        // „Çπ„É¨„ÉÉ„Éâ‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
        await loadThreads();
      } else {
        const errorData = await response.json();
        console.error('‚ùå New email send failed:', response.status, response.statusText);
        console.error('‚ùå Error response:', errorData);
        console.log('=== FRONTEND NEW EMAIL SEND DEBUG END (ERROR) ===');
        
        alert(`„É°„Éº„É´ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${errorData.error || '‰∏çÊòé„Å™„Ç®„É©„Éº'}`);
      }
    } catch (error) {
      console.error('„É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
      alert('„É°„Éº„É´ÈÄÅ‰ø°‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    } finally {
      setIsSendingNewEmail(false);
    }
  };

  const handleSendReply = async () => {
    if (!replyText.trim() || !currentThread) return;

    setIsSending(true);
    try {
      const lastMessage = currentThread.messages && currentThread.messages.length > 0 
        ? currentThread.messages[currentThread.messages.length - 1] 
        : null;
      
      if (!lastMessage) {
        alert('„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        return;
      }
      const fromHeader = getHeader(lastMessage, 'from');
      const subjectHeader = getHeader(lastMessage, 'subject');
      
      // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØFormData„Çí‰ΩøÁî®
      if (attachmentFiles.length > 0) {
        const lastMessageId = lastMessage.id;
        
        // Ê≠£„Åó„ÅÑËøî‰ø°„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
        let replyHeaders = null;
        try {
          const response = await fetch(`/api/gmail/threads/${currentThread.id}/reply-headers?messageId=${lastMessageId}`);
          if (response.ok) {
            const headerData = await response.json();
            replyHeaders = headerData.replyHeaders;
            console.log('üìß Retrieved reply headers for attachment email:', replyHeaders);
          }
        } catch (error) {
          console.error('‚ùå Error getting reply headers for attachment email:', error);
        }
        
        const formData = new FormData();
        formData.append('to', fromHeader);
        
        // Ê≠£„Åó„ÅÑ‰ª∂Âêç„Çí‰ΩøÁî®
        const replySubject = replyHeaders?.subject || 
          (subjectHeader.startsWith('Re:') ? subjectHeader : `Re: ${subjectHeader}`);
        formData.append('subject', replySubject);
        formData.append('message', replyText);
        formData.append('threadId', currentThread.id);
        formData.append('replyToMessageId', lastMessageId);
        
        // Ëøî‰ø°„Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±„ÇíËøΩÂä†
        if (replyHeaders) {
          formData.append('replyHeaders', JSON.stringify(replyHeaders));
        }
        
        // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„ÇíËøΩÂä†
        attachmentFiles.forEach((file, index) => {
          formData.append(`attachment_${index}`, file);
        });
        
        const response = await fetch('/api/gmail/send-with-attachments', {
          method: 'POST',
          body: formData,
        });
        
        // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const authErrorHandled = await handleApiResponse(response);
        if (authErrorHandled) {
          return;
        }
        
        if (response.ok) {
          setReplyText('');
          setAttachmentFiles([]);
          alert('„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü');
          await loadThreadDetails(currentThread.id);
        } else {
          alert('„É°„Éº„É´ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
      } else {
        // Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„Å™„Åó„ÅÆÂ†¥Âêà„ÅØÊ≠£„Åó„ÅÑËøî‰ø°„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó„Åó„Å¶API„Çí‰ΩøÁî®
        const lastMessageId = lastMessage.id;
        
        console.log('üìß Getting reply headers for message:', lastMessageId);
        
        // Ê≠£„Åó„ÅÑËøî‰ø°„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
        let replyHeaders = null;
        try {
          // GmailService„Çí‰Ωø„Å£„Å¶Ê≠£„Åó„ÅÑ„Éò„ÉÉ„ÉÄ„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
          const response = await fetch(`/api/gmail/threads/${currentThread.id}/reply-headers?messageId=${lastMessageId}`);
          if (response.ok) {
            replyHeaders = await response.json();
            console.log('üìß Retrieved reply headers:', replyHeaders);
          } else {
            console.warn('‚ö†Ô∏è Failed to get reply headers, using fallback');
          }
        } catch (error) {
          console.error('‚ùå Error getting reply headers:', error);
        }
        
        // ‰ª∂Âêç„ÇíË®≠ÂÆöÔºà„Éò„ÉÉ„ÉÄ„Éº„Åã„ÇâÂèñÂæó„Åó„Åü‰ª∂Âêç„ÇíÂÑ™ÂÖàÔºâ
        const replySubject = replyHeaders?.subject || 
          (subjectHeader.startsWith('Re:') ? subjectHeader : `Re: ${subjectHeader}`);
        
        // üîç DEBUG: ÈÄÅ‰ø°„Åô„Çã„Éá„Éº„Çø„ÅÆË©≥Á¥∞„Çí„É≠„Ç∞Âá∫Âäõ
        const sendData = {
          to: fromHeader,
          subject: replySubject,
          message: replyText,
          threadId: currentThread.id,
          replyToMessageId: lastMessageId,
          replyHeaders: replyHeaders // Êñ∞„Åó„ÅèËøΩÂä†
        };
        
        console.log('=== FRONTEND EMAIL SEND DEBUG START ===');
        console.log('üìß Frontend send data:', JSON.stringify(sendData, null, 2));
        console.log('üìß Original subject header:', subjectHeader);
        console.log('üìß Reply subject:', replySubject);
        console.log('üìß From header:', fromHeader);
        console.log('üìß Reply text:', replyText);
        console.log('üìß Thread ID:', currentThread.id);
        console.log('üìß Reply to message ID:', lastMessageId);
        console.log('üìß Reply headers:', replyHeaders);
        console.log('üìß Last message details:', lastMessage);
        
        const response = await fetch('/api/gmail/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(sendData),
        });

        // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const authErrorHandled = await handleApiResponse(response);
        if (authErrorHandled) {
          return;
        }

        if (response.ok) {
          const responseData = await response.json();
          console.log('‚úÖ Email send response:', responseData);
          console.log('=== FRONTEND EMAIL SEND DEBUG END (SUCCESS) ===');
          
          setReplyText('');
          alert('„É°„Éº„É´„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü');
          await loadThreadDetails(currentThread.id);
        } else {
          const errorData = await response.text();
          console.error('‚ùå Email send failed:', response.status, response.statusText);
          console.error('‚ùå Error response:', errorData);
          console.log('=== FRONTEND EMAIL SEND DEBUG END (ERROR) ===');
          
          alert('„É°„Éº„É´ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
      }
    } catch (error) {
      console.error('ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
      alert('„É°„Éº„É´ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    } finally {
      setIsSending(false);
    }
  };

  const formatDate = (internalDate: string) => {
    const date = new Date(parseInt(internalDate));
    return date.toLocaleString('ja-JP');
  };

  const getHeader = (message: GmailMessage, headerName: string): string => {
    const header = message.payload.headers.find(
      h => h.name.toLowerCase() === headerName.toLowerCase()
    );
    return header?.value || '';
  };

  const decodeBase64 = (data: string): string => {
    try {
      return Buffer.from(data, 'base64').toString('utf-8');
    } catch (error) {
      return '';
    }
  };

  const getEmailBody = (message: GmailMessage): string => {
    const { payload } = message;
    
    // „Ç∑„É≥„Éó„É´„Å™„ÉÜ„Ç≠„Çπ„Éà/HTML„É°„ÉÉ„Çª„Éº„Ç∏
    if (payload.body?.data) {
      return decodeBase64(payload.body.data);
    }

    // „Éû„É´„ÉÅ„Éë„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏
    if (payload.parts) {
      for (const part of payload.parts) {
        if (part.mimeType === 'text/html' || part.mimeType === 'text/plain') {
          if (part.body?.data) {
            return decodeBase64(part.body.data);
          }
        }
      }
    }

    return message.snippet;
  };

  const getInfluencerName = (message: GmailMessage) => {
    const fromHeader = getHeader(message, 'from');
    const emailMatch = fromHeader.match(/^(.+)<(.+)>$/);
    return emailMatch ? emailMatch[1].trim() : fromHeader;
  };

  // AIËøî‰ø°„Éë„Çø„Éº„É≥ÁîüÊàêÁî®„ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞
  const getMessageSender = (message: GmailMessage): string => {
    const fromHeader = getHeader(message, 'from');
    const emailMatch = fromHeader.match(/^(.+?)\s*<(.+)>$/);
    return emailMatch ? emailMatch[1].trim().replace(/['"]/g, '') : fromHeader;
  };

  const getMessagePlainText = (message: GmailMessage): string => {
    const emailBody = getEmailBody(message);
    // HTML„Çø„Ç∞„ÇíÈô§Âéª„Åó„Å¶„Éó„É¨„Éº„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´„Åô„Çã
    return emailBody.replace(/<[^>]*>/g, '').replace(/&[^;]+;/g, ' ').trim();
  };

  const getMessageSubject = (message: GmailMessage): string => {
    return getHeader(message, 'subject');
  };

  const isFromUser = (message: GmailMessage) => {
    const fromHeader = getHeader(message, 'from');
    // Á∞°Âçò„Å™„ÉÅ„Çß„ÉÉ„ÇØ - ÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„Éº„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®ÊØîËºÉ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
    return fromHeader.includes('@company.com'); // ‰ªÆ„ÅÆÂà§ÂÆö
  };

  // „Çπ„É¨„ÉÉ„Éâ„Åã„Çâ‰ª∂Âêç„ÇíÂèñÂæó
  const getThreadSubject = (thread: EmailThread): string => {
    if (!thread.messages || thread.messages.length === 0) {
      // snippet„Åã„Çâ‰ª∂Âêç„ÇíÊé®Ê∏¨
      const snippetText = thread.snippet || '';
      if (snippetText.length > 0) {
        // ÊúÄÂàù„ÅÆ50ÊñáÂ≠óÁ®ãÂ∫¶„Çí‰ª∂Âêç„Å®„Åó„Å¶‰ΩøÁî®
        return snippetText.substring(0, 50) + (snippetText.length > 50 ? '...' : '');
      }
      return '„Çø„Ç§„Éà„É´„Å™„Åó';
    }
    const firstMessage = thread.messages[0];
    const subject = getHeader(firstMessage, 'subject');
    if (subject && subject.trim()) {
      return subject;
    }
    // subject„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÇÇsnippet„Çí‰ΩøÁî®
    const snippetText = thread.snippet || '';
    if (snippetText.length > 0) {
      return snippetText.substring(0, 50) + (snippetText.length > 50 ? '...' : '');
    }
    return '„Çø„Ç§„Éà„É´„Å™„Åó';
  };

  // „Çπ„É¨„ÉÉ„Éâ„Åã„Çâ‰∏ªË¶Å„Å™Áõ∏Êâã„ÇíÂèñÂæó
  const getThreadPrimaryContact = (thread: EmailThread): string => {
    // „Åæ„Åösnippet„Åã„ÇâÈÄÅ‰ø°ËÄÖÊÉÖÂ†±„ÇíÊé®Ê∏¨
    const snippet = thread.snippet || '';
    
    // snippet„Å´Âê´„Åæ„Çå„Çã‰∏ÄËà¨ÁöÑ„Å™„Éë„Çø„Éº„É≥„ÇíËß£Êûê
    if (snippet.includes('„Ç∞„É≠„Éº„Éì„Çπ')) return '„Ç∞„É≠„Éº„Éì„ÇπÁµåÂñ∂Â§ßÂ≠¶Èô¢';
    if (snippet.includes('GitHub')) return 'GitHub';
    if (snippet.includes('Amazon')) return 'Amazon';
    if (snippet.includes('Google')) return 'Google';
    
    // „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØË©≥Á¥∞„ÇíÂèñÂæó
    if (thread.messages && thread.messages.length > 0) {
      const latestMessage = thread.messages[thread.messages.length - 1];
      const fromHeader = getHeader(latestMessage, 'from');
      
      if (fromHeader) {
        // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åã„ÇâÂêçÂâç„ÇíÊäΩÂá∫Ôºà"ÂêçÂâç <email@example.com>" ÂΩ¢ÂºèÔºâ
        const emailMatch = fromHeader.match(/^(.+?)\s*<(.+)>$/);
        if (emailMatch) {
          let name = emailMatch[1].trim().replace(/['"]/g, '');
          
          // MIME „Ç®„É≥„Ç≥„Éº„Éâ„Åï„Çå„ÅüÂêçÂâç„Çí„Éá„Ç≥„Éº„Éâ
          if (name.includes('=?UTF-8?B?')) {
            try {
              const base64Match = name.match(/=\?UTF-8\?B\?(.+?)\?=/);
              if (base64Match) {
                name = Buffer.from(base64Match[1], 'base64').toString('utf8');
              }
            } catch (e) {
              console.warn('Failed to decode MIME header:', e);
            }
          }
          
          return name || emailMatch[2].split('@')[0];
        }
        
        if (fromHeader.includes('@')) {
          return fromHeader.split('@')[0];
        }
        
        return fromHeader;
      }
    }
    
    // ÊúÄÂæå„ÅÆÊâãÊÆµÔºösnippet„ÅÆÊúÄÂàù„ÅÆÈÉ®ÂàÜ„Åã„ÇâÊé®Ê∏¨
    if (snippet.length > 0) {
      const firstLine = snippet.split('\n')[0];
      if (firstLine.length > 0 && firstLine.length < 30) {
        return firstLine;
      }
      return snippet.substring(0, 20) + '...';
    }
    
    return '‰∏çÊòé„Å™ÈÄÅ‰ø°ËÄÖ';
  };

  // „Çπ„É¨„ÉÉ„Éâ„ÅÆÊú™Ë™≠Âà§ÂÆöÔºàÁ∞°ÊòìÁâàÔºâ
  const isThreadUnread = (thread: EmailThread): boolean => {
    // ÂÆüË£Ö‰∏ä„ÅÆÁ∞°Áï•ÂåñÔºö„Åô„Åπ„Å¶Êó¢Ë™≠„Å®„Åó„Å¶Êâ±„ÅÜ
    // ÂÆüÈöõ„Å´„ÅØlabelIds„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶ 'UNREAD' „Åå„ÅÇ„Çã„Åã„ÇíÁ¢∫Ë™ç
    return false;
  };

  // Ë™çË®º„ÅåÂøÖË¶Å„Å™Â†¥Âêà
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin h-8 w-8 border-4 border-indigo-600 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-gray-600">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="card p-8 text-center max-w-md mx-auto">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô</h1>
          <p className="text-gray-600 mb-6">
            GmailÁµ±ÂêàÊ©üËÉΩ„Çí‰ΩøÁî®„Åô„Çã„Å´„ÅØ„ÄÅGoogle„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          </p>
          <Link href="/auth/signin">
            <button className="btn btn-primary w-full">
              Google„Åß„É≠„Ç∞„Ç§„É≥
            </button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <AuthGuard>
      <ErrorBoundary>
        <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
          {/* „Éò„ÉÉ„ÉÄ„Éº */}
          <Header variant="glass" />

          <main className="container mx-auto px-6 py-8">
            <div className={`transform transition-all duration-1000 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
              {/* „Éò„ÉÉ„ÉÄ„Éº„Çª„ÇØ„Ç∑„Éß„É≥ */}
              <div className="text-center mb-12">
                <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                  GmailÁµ±Âêà
                  <span className="text-gradient block">„É°„ÉÉ„Çª„Éº„Ç∏ÁÆ°ÁêÜ</span>
                </h1>
                <p className="text-xl text-gray-600 max-w-2xl mx-auto">
                  ÂÆüÈöõ„ÅÆGmail„Åß„Ç§„É≥„Éï„É´„Ç®„É≥„Çµ„Éº„Å®„ÇÑ„ÇäÂèñ„Çä„Åó„ÄÅAI„ÅåËøî‰ø°„ÇíÊèêÊ°à„Åó„Åæ„Åô
                </p>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                {/* Êñ∞Ë¶è„É°„Éº„É´‰ΩúÊàê„Ç®„É™„Ç¢ */}
                {isComposingNew && (
                  <div className="col-span-1 lg:col-span-3 mb-8">
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border border-green-200">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-xl font-bold text-green-800 flex items-center gap-2">
                          ‚úâÔ∏è AIÁîüÊàê„Ç≥„É©„ÉúÊèêÊ°à„É°„Éº„É´
                        </h3>
                        <button
                          onClick={() => {
                            setIsComposingNew(false);
                            setNewEmailTo('');
                            setNewEmailSubject('');
                            setNewEmailBody('');
                          }}
                          className="text-gray-500 hover:text-gray-700"
                        >
                          ‚úï
                        </button>
                      </div>
                      
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">ÂÆõÂÖà</label>
                          <input
                        type="email"
                        value={newEmailTo}
                        onChange={(e) => setNewEmailTo(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="‰æã: influencer@example.com"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">‰ª∂Âêç</label>
                      <input
                        type="text"
                        value={newEmailSubject}
                        onChange={(e) => setNewEmailSubject(e.target.value)}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="‰ª∂Âêç„ÇíÂÖ•Âäõ..."
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Êú¨Êñá</label>
                      <textarea
                        value={newEmailBody}
                        onChange={(e) => setNewEmailBody(e.target.value)}
                        rows={12}
                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                        placeholder="„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ..."
                      />
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-green-700 bg-green-100 px-3 py-2 rounded-lg">
                        üí° „Åì„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØAI„Åå„ÅÇ„Å™„Åü„ÅÆÂïÜÊùêÊÉÖÂ†±„Å´Âü∫„Å•„ÅÑ„Å¶ÁîüÊàê„Åó„Åæ„Åó„Åü
                      </div>
                      
                      <div className="flex items-center gap-3">
                        <button
                          onClick={() => {
                            setIsComposingNew(false);
                            setNewEmailTo('');
                            setNewEmailSubject('');
                            setNewEmailBody('');
                          }}
                          className="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-50 transition-colors"
                        >
                          „Ç≠„É£„É≥„Çª„É´
                        </button>
                        <button
                          onClick={handleSendNewEmail}
                          disabled={!newEmailTo || !newEmailSubject || !newEmailBody || isSendingNewEmail}
                          className="bg-gradient-to-r from-green-600 to-blue-600 text-white px-6 py-3 rounded-xl font-medium hover:from-green-700 hover:to-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                        >
                          {isSendingNewEmail ? (
                            <>
                              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                              ÈÄÅ‰ø°‰∏≠...
                            </>
                          ) : (
                            <>
                              üì§ ÈÄÅ‰ø°
                            </>
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {/* Ê§úÁ¥¢„Ç®„É™„Ç¢ */}
            {showSearch && (
              <div className="col-span-1 lg:col-span-3 mb-8">
                <EmailSearch 
                  onSearch={handleSearch}
                  onClear={handleClearSearch}
                  isLoading={isLoadingThreads}
                />
              </div>
            )}
            
            {/* ÈÄöÁü•„Ç®„É™„Ç¢ */}
            {showNotifications && (
              <div className="col-span-1 lg:col-span-3 mb-8">
                <NotificationManager />
              </div>
            )}
            
            {/* „Çπ„É¨„ÉÉ„Éâ‰∏ÄË¶ß */}
            <div className="lg:col-span-1">
              <div className="card">
                <div className="p-6 border-b border-gray-100">
                  
                  <div className="flex items-center gap-2 mb-4">
                    <button
                      onClick={() => setShowSearch(!showSearch)}
                      className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center gap-2 ${
                        showSearch 
                          ? 'bg-indigo-100 text-indigo-700 border border-indigo-300' 
                          : 'bg-gray-50 text-gray-600 hover:bg-gray-100 border border-gray-200'
                      }`}
                    >
                      üîç Ê§úÁ¥¢
                    </button>
                    <button
                      onClick={() => setShowNotifications(!showNotifications)}
                      className={`px-3 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center gap-2 ${
                        showNotifications 
                          ? 'bg-orange-100 text-orange-700 border border-orange-300' 
                          : 'bg-gray-50 text-gray-600 hover:bg-gray-100 border border-gray-200'
                      }`}
                    >
                      üîî ÈÄöÁü•
                    </button>
                    <button
                      onClick={async () => {
                        console.log('üîÑ ÊâãÂãïÊõ¥Êñ∞„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ');
                        await loadThreads();
                        console.log('‚úÖ „Çπ„É¨„ÉÉ„ÉâÊõ¥Êñ∞ÂÆå‰∫Ü');
                      }}
                      disabled={isLoadingThreads}
                      className="px-3 py-2 rounded-lg text-sm font-medium bg-green-50 text-green-700 hover:bg-green-100 border border-green-200 transition-all duration-200 flex items-center gap-2 disabled:opacity-50"
                    >
                      {isLoadingThreads || isRealtimeLoading ? (
                        <svg className="animate-spin h-3 w-3" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      ) : (
                        'üîÑ'
                      )}
                      Êõ¥Êñ∞
                    </button>
                    <div className="flex items-center gap-4 text-xs ml-auto">
                      <div className="flex items-center text-green-600">
                        <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        GmailÊé•Á∂öÊ∏à„Åø
                      </div>
                      <div className={`flex items-center ${gmailMonitoringActive ? 'text-purple-600' : 'text-gray-400'}`}>
                        <svg className={`w-3 h-3 mr-1 ${gmailMonitoringActive ? 'animate-pulse' : ''}`} fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        {gmailMonitoringActive ? 'Ëá™ÂãïÁõ£Ë¶ñ‰∏≠' : 'Áõ£Ë¶ñÂÅúÊ≠¢‰∏≠'}
                      </div>
                    </div>
                  </div>
                </div>
                <div className="divide-y divide-gray-100 max-h-96 overflow-y-auto">
                  {(() => {
                    console.log('üîç Rendering threads, count:', threads.length);
                    console.log('üîç Threads data:', threads);
                    return threads.length === 0 ? (
                      <div className="p-6 text-center text-gray-500">
                        <p>„É°„Éº„É´„Çπ„É¨„ÉÉ„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
                        <p className="text-xs mt-2">ÁèæÂú®„ÅÆ„Çπ„É¨„ÉÉ„ÉâÊï∞: {threads.length}</p>
                      </div>
                    ) : (
                    threads.map((thread, index) => (
                      <div
                        key={thread.id}
                        onClick={() => setSelectedThread(thread.id)}
                        className={`p-4 cursor-pointer hover:bg-gray-50 transition-all duration-200 ${
                          selectedThread === thread.id ? 'bg-indigo-50 border-r-4 border-indigo-500' : ''
                        }`}
                        style={{transitionDelay: `${index * 100}ms`}}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center space-x-2 mb-2">
                              <h3 className={`font-semibold truncate ${isThreadUnread(thread) ? 'text-gray-900' : 'text-gray-700'}`}>
                                {getThreadSubject(thread)}
                              </h3>
                              <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                                {thread.messages?.length || 0}
                              </span>
                              {isThreadUnread(thread) && (
                                <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                              )}
                            </div>
                            <div className="flex items-center space-x-2 mb-2">
                              <div className="w-6 h-6 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center text-white text-xs font-medium">
                                {getThreadPrimaryContact(thread)[0]?.toUpperCase() || '?'}
                              </div>
                              <p className="text-sm text-gray-600 font-medium truncate">
                                {getThreadPrimaryContact(thread)}
                              </p>
                            </div>
                            <p className="text-sm text-gray-500 line-clamp-2 mb-3">
                              {thread.snippet}
                            </p>
                            <div className="flex items-center justify-between">
                              <div className="flex items-center space-x-2">
                                <svg className="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <p className="text-xs text-gray-400">
                                  {thread.messages && thread.messages.length > 0 && formatDate(thread.messages[thread.messages.length - 1].internalDate)}
                                </p>
                              </div>
                              <div className="flex items-center space-x-2">
                                {/* Ëá™ÂãïÂåñÁä∂ÊÖã„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº */}
                                {threadAutomationStates[thread.id]?.isActive && (
                                  <div className={`flex items-center space-x-1 px-2 py-0.5 rounded-full text-xs ${
                                    threadAutomationStates[thread.id].mode === 'semi_auto' 
                                      ? 'bg-purple-100 text-purple-700' 
                                      : 'bg-gray-100 text-gray-600'
                                  }`}>
                                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                    </svg>
                                    <span>{threadAutomationStates[thread.id].mode === 'semi_auto' ? 'ÂçäËá™Âãï' : 'ÊâãÂãï'}</span>
                                  </div>
                                )}
                                {thread.messages && thread.messages.length > 1 && (
                                  <svg className="w-3 h-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                  </svg>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))
                  );
                  })()}
                </div>
              </div>
            </div>

            {/* „É°„Éº„É´Ë©≥Á¥∞ */}
            <div className="lg:col-span-2">
              {currentThread ? (
                <div className="space-y-4">
                  {/* „Çπ„É¨„ÉÉ„ÉâËá™ÂãïÂåñ„Ç≥„É≥„Éà„É≠„Éº„É´ */}
                  <ThreadAutomationControl 
                    threadId={currentThread.id}
                    threadSubject={currentThread.messages && currentThread.messages.length > 0 ? 
                      getHeader(currentThread.messages[0], 'subject') : '„É°„Éº„É´„Çπ„É¨„ÉÉ„Éâ'}
                    onModeChange={(mode, enabled) => {
                      console.log(`ü§ñ „Çπ„É¨„ÉÉ„ÉâËá™ÂãïÂåñÁä∂ÊÖãÂ§âÊõ¥: ${currentThread.id}`, {
                        „É¢„Éº„Éâ: mode,
                        ÊúâÂäπ: enabled,
                        ÊôÇÂàª: new Date().toLocaleTimeString()
                      });
                      
                      // „Çπ„É¨„ÉÉ„Éâ„ÅÆËá™ÂãïÂåñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
                      setThreadAutomationStates(prev => ({
                        ...prev,
                        [currentThread.id]: { mode, isActive: enabled }
                      }));
                      
                      // ÂçäËá™Âãï„É¢„Éº„Éâ„ÅåÊúâÂäπ„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÄÅ„Çπ„É¨„ÉÉ„Éâ„ÅÆËøΩË∑°„ÇíÈñãÂßã
                      if (mode === 'semi_auto' && enabled) {
                        console.log(`üéØ „Çπ„É¨„ÉÉ„Éâ ${currentThread.id} „ÅÆÂçäËá™ÂãïÁõ£Ë¶ñ„ÇíÈñãÂßã`);
                        
                        // ÁèæÂú®„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÅÆÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏ÊôÇÂàª„ÇíÂèñÂæó„Åó„Å¶ËøΩË∑°ÈñãÂßã
                        const initializeThreadTracking = async () => {
                          try {
                            const messages = currentThread.messages || [];
                            if (messages.length > 0) {
                              const latestMessage = messages[messages.length - 1];
                              const latestMessageTime = latestMessage.internalDate;
                              
                              setTrackedThreads(prev => ({
                                ...prev,
                                [currentThread.id]: {
                                  lastMessageTime: latestMessageTime,
                                  isAutomated: true
                                }
                              }));
                              
                              console.log(`‚úÖ „Çπ„É¨„ÉÉ„Éâ ${currentThread.id} „ÅÆËøΩË∑°ÈñãÂßãÂÆå‰∫Ü`, {
                                ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏ÊôÇÂàª: latestMessageTime,
                                „É°„ÉÉ„Çª„Éº„Ç∏Êï∞: messages.length
                              });
                            }
                          } catch (error) {
                            console.error(`‚ùå „Çπ„É¨„ÉÉ„Éâ ${currentThread.id} „ÅÆËøΩË∑°ÈñãÂßã„Ç®„É©„Éº:`, error);
                          }
                        };
                        
                        initializeThreadTracking();
                      } else if (!enabled) {
                        // Ëá™ÂãïÂåñ„ÅåÁÑ°Âäπ„Å´„Å™„Å£„ÅüÂ†¥Âêà„ÄÅËøΩË∑°„ÇíÂÅúÊ≠¢
                        console.log(`‚èπÔ∏è „Çπ„É¨„ÉÉ„Éâ ${currentThread.id} „ÅÆËá™ÂãïÂåñËøΩË∑°„ÇíÂÅúÊ≠¢`);
                        setTrackedThreads(prev => {
                          const updated = { ...prev };
                          delete updated[currentThread.id];
                          // localStorage„ÇÇÊõ¥Êñ∞
                          if (Object.keys(updated).length === 0) {
                            localStorage.removeItem('trackedThreads');
                          } else {
                            localStorage.setItem('trackedThreads', JSON.stringify(updated));
                          }
                          return updated;
                        });
                      }
                    }}
                  />
                  
                  <div className="card">
                  {/* „Éò„ÉÉ„ÉÄ„Éº */}
                  <div className="p-6 border-b border-gray-100">
                    <div className="flex items-center justify-between">
                      <div>
                        <h2 className="text-lg font-bold text-gray-900 flex items-center gap-2">
                          Gmail „Çπ„É¨„ÉÉ„ÉâË©≥Á¥∞
                          {threadAutomationStates[currentThread.id]?.isActive && (
                            <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${
                              threadAutomationStates[currentThread.id].mode === 'semi_auto' 
                                ? 'bg-purple-100 text-purple-800' 
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                              <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                              {threadAutomationStates[currentThread.id].mode === 'semi_auto' ? 'ÂçäËá™Âãï' : 'ÊâãÂãï'}„É¢„Éº„Éâ
                            </span>
                          )}
                        </h2>
                        <p className="text-sm text-gray-500 mt-1">
                          {currentThread.messages?.length || 0}‰ª∂„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
                        </p>
                        {/* Áõ∏Êâã„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπË°®Á§∫ */}
                        {currentThread.messages && currentThread.messages.length > 0 && (() => {
                          const lastMessage = currentThread.messages[currentThread.messages.length - 1];
                          const fromHeader = getHeader(lastMessage, 'from');
                          const emailMatch = fromHeader.match(/^(.+?)\s*<(.+)>$/);
                          const recipientEmail = emailMatch ? emailMatch[2] : fromHeader;
                          const recipientName = emailMatch ? emailMatch[1].trim().replace(/['"]/g, '') : '';
                          
                          return (
                            <div className="mt-2 flex items-center space-x-2">
                              <span className="text-xs text-gray-400">ÈÄÅ‰ø°ÂÖà:</span>
                              <span className="text-sm font-medium text-indigo-600">
                                {recipientName && recipientName !== recipientEmail ? 
                                  `${recipientName} <${recipientEmail}>` : 
                                  recipientEmail
                                }
                              </span>
                            </div>
                          );
                        })()}
                      </div>
                    </div>
                  </div>

                  {/* „É°„Éº„É´‰∏ÄË¶ß */}
                  <div className="max-h-96 overflow-y-auto scrollbar-hide">
                    {(currentThread.messages || []).map((message, index) => (
                      <div
                        key={message.id}
                        className="p-6 border-b border-gray-100 transition-all duration-300"
                        style={{transitionDelay: `${index * 150}ms`}}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-medium ${
                              isFromUser(message) ? 'bg-indigo-500' : 'bg-purple-500'
                            }`}>
                              {isFromUser(message) ? '„ÅÇ' : getInfluencerName(message)[0]}
                            </div>
                            <div>
                              <p className="text-sm font-semibold text-gray-900">
                                {isFromUser(message) ? '„ÅÇ„Å™„Åü' : getInfluencerName(message)}
                              </p>
                              <p className="text-xs text-gray-500">{formatDate(message.internalDate)}</p>
                            </div>
                          </div>
                          <div className="text-xs text-gray-400">
                            {getHeader(message, 'subject')}
                          </div>
                        </div>
                        <div className="bg-gray-50 rounded-lg p-4">
                          <div className="text-gray-700 leading-relaxed whitespace-pre-wrap break-words">
                            {getEmailBody(message)}
                          </div>
                          
                          {/* Ê∑ª‰ªò„Éï„Ç°„Ç§„É´Ë°®Á§∫ */}
                          {message.attachments && message.attachments.length > 0 && (
                            <AttachmentDisplay 
                              attachments={message.attachments} 
                              messageId={message.id}
                            />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Ëøî‰ø°„Ç®„É™„Ç¢ */}
                  <div className="p-6 border-t border-gray-100 bg-gray-50/50">
                    <div className="mb-4">
                      <label className="block text-sm font-semibold text-gray-700 mb-3">
                        <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                        Ëøî‰ø°„É°„ÉÉ„Çª„Éº„Ç∏
                      </label>
                      <textarea
                        value={replyText}
                        onChange={(e) => setReplyText(e.target.value)}
                        placeholder="Ëøî‰ø°„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                        className="input bg-white"
                        rows={4}
                      />
                    </div>
                    
                    {/* Ê∑ª‰ªò„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ */}
                    <div className="mb-4">
                      <AttachmentUpload 
                        onFilesChange={setAttachmentFiles}
                        maxFiles={5}
                        maxFileSize={25}
                      />
                    </div>
                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-4">
                        <div className="flex items-center text-sm text-gray-500">
                          <svg className="w-4 h-4 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                          </svg>
                          Gmail APIÊé•Á∂öÊ∏à„Åø
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <button
                          onClick={handleSendReply}
                          disabled={isSending || !replyText.trim()}
                          className="btn btn-primary text-sm"
                        >
                          {isSending ? (
                            <>
                              <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                              </svg>
                              ÈÄÅ‰ø°‰∏≠...
                            </>
                          ) : (
                            <>
                              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                              </svg>
                              ÈÄÅ‰ø°
                            </>
                          )}
                        </button>
                      </div>
                    </div>
                  </div>
                  </div>
                </div>
              ) : (
                <div className="card p-12 text-center">
                  <div className="max-w-md mx-auto">
                    <svg className="w-24 h-24 text-gray-300 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                    <h3 className="text-xl font-semibold text-gray-900 mb-2">„Çπ„É¨„ÉÉ„Éâ„ÇíÈÅ∏Êäû</h3>
                    <p className="text-gray-500">
                      Â∑¶ÂÅ¥„Åã„ÇâGmail„Çπ„É¨„ÉÉ„Éâ„ÇíÈÅ∏Êäû„Åó„Å¶„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                    </p>
                  </div>
                </div>
              )}
            </div>
          </div>

        {/* AIËøî‰ø°ÂÄôË£ú„Ç®„É™„Ç¢ */}
        {currentThread && (
          <div className="mt-12 card p-8">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center mb-4">
                <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-full mr-4">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">AIËøî‰ø°ÂÄôË£úÁîüÊàê</h3>
                  <p className="text-gray-600">
                    Áî∞‰∏≠ÁæéÂí≤Ôºà‰∫§Ê∏â„Ç®„Éº„Ç∏„Çß„É≥„ÉàÔºâ„Åå„É°„Éº„É´„Çπ„É¨„ÉÉ„Éâ„ÇíÂàÜÊûê„Åó„ÄÅÊúÄÈÅ©„Å™Ëøî‰ø°„Éë„Çø„Éº„É≥„ÇíÊèêÊ°à„Åó„Åæ„Åô
                  </p>
                </div>
              </div>
              
              {/* „Çπ„É¨„ÉÉ„ÉâÂàÜÊûêÁµêÊûú */}
              {threadAnalysis && (
                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <h4 className="font-semibold text-gray-800 mb-3">üìä È´òÂ∫¶„Å™‰∫§Ê∏âÂàÜÊûêÁµêÊûú</h4>
                  
                  {/* Âü∫Êú¨ÂàÜÊûê */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                    <div className="text-center">
                      <div className="text-gray-500">‰∫§Ê∏âÊÆµÈöé</div>
                      <div className="font-medium text-blue-600">
                        {threadAnalysis.conversation_stage || 'ÂàÜÊûê‰∏≠'}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-gray-500">ÊàêÂäüÁ¢∫Áéá</div>
                      <div className={`font-medium ${
                        (threadAnalysis.success_probability || 0) > 0.7 ? 'text-green-600' :
                        (threadAnalysis.success_probability || 0) > 0.4 ? 'text-yellow-600' : 'text-red-600'
                      }`}>
                        {threadAnalysis.success_probability ? 
                          `${(threadAnalysis.success_probability * 100).toFixed(1)}%` : 'N/A'}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-gray-500">ÊÑüÊÉÖ„Çπ„Ç≥„Ç¢</div>
                      <div className={`font-medium ${
                        (threadAnalysis.sentiment || 0) > 0.3 ? 'text-green-600' :
                        (threadAnalysis.sentiment || 0) < -0.3 ? 'text-red-600' : 'text-gray-600'
                      }`}>
                        {typeof threadAnalysis.sentiment === 'number' ? 
                          threadAnalysis.sentiment.toFixed(2) : '‰∏≠Á´ã'}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-gray-500">Êé®Â•®Êà¶Áï•</div>
                      <div className="font-medium text-purple-600">
                        {threadAnalysis.recommended_approach || 'Êà¶Áï•ÂàÜÊûê‰∏≠'}
                      </div>
                    </div>
                  </div>
                  
                  {/* Ë©≥Á¥∞ÂàÜÊûê */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                    {/* Êá∏Âøµ‰∫ãÈ†Ö */}
                    {threadAnalysis.key_concerns && threadAnalysis.key_concerns.length > 0 && (
                      <div className="bg-red-50 rounded p-3">
                        <div className="font-medium text-red-800 mb-1">‚ö†Ô∏è Êá∏Âøµ‰∫ãÈ†Ö</div>
                        <ul className="text-red-700 text-xs space-y-1">
                          {threadAnalysis.key_concerns.map((concern, idx) => (
                            <li key={idx}>‚Ä¢ {concern}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {/* Ê©ü‰ºö */}
                    {threadAnalysis.opportunities && threadAnalysis.opportunities.length > 0 && (
                      <div className="bg-green-50 rounded p-3">
                        <div className="font-medium text-green-800 mb-1">üí° Ê©ü‰ºö</div>
                        <ul className="text-green-700 text-xs space-y-1">
                          {threadAnalysis.opportunities.map((opportunity, idx) => (
                            <li key={idx}>‚Ä¢ {opportunity}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {/* Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó */}
                    {threadAnalysis.next_steps && threadAnalysis.next_steps.length > 0 && (
                      <div className="bg-blue-50 rounded p-3">
                        <div className="font-medium text-blue-800 mb-1">üéØ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó</div>
                        <ul className="text-blue-700 text-xs space-y-1">
                          {threadAnalysis.next_steps.map((step, idx) => (
                            <li key={idx}>‚Ä¢ {step}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* „Ç®„Éº„Ç∏„Çß„É≥„ÉàÂãï‰ΩúÁä∂Ê≥ÅË°®Á§∫ */}
              <div className="mb-6">
                <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4 border border-blue-200">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <svg className="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09z" />
                          </svg>
                        </div>
                      </div>
                      <div>
                        <div className="text-sm font-medium text-blue-900">
                          ü§ñ AI„Ç®„Éº„Ç∏„Çß„É≥„Éà: {agentStatus}
                        </div>
                        {processingSteps.length > 0 && (
                          <div className="text-xs text-blue-700 mt-1">
                            {processingSteps[processingSteps.length - 1].detail}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    {/* Âá¶ÁêÜ„Çπ„ÉÜ„ÉÉ„ÉóÂ±•Ê≠¥ */}
                    {processingSteps.length > 1 && (
                      <button
                        onClick={() => setShowCustomPrompt(!showCustomPrompt)}
                        className="text-xs text-blue-600 hover:text-blue-800 underline flex items-center space-x-1"
                      >
                        <span>üîç 5ÊÆµÈöéË©≥Á¥∞Ë°®Á§∫</span>
                        <span className="bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded text-xs">
                          {processingSteps.length}/5ÂÆå‰∫Ü
                        </span>
                        <span className="text-xs">
                          {showCustomPrompt ? '‚ñ≤' : '‚ñº'}
                        </span>
                      </button>
                    )}
                  </div>
                  
                  {/* 7ÊÆµÈöéË©≥Á¥∞„Çπ„ÉÜ„ÉÉ„ÉóË°®Á§∫ */}
                  {showCustomPrompt && processingSteps.length > 1 && (
                    <div className="mt-3 border-t border-blue-200 pt-3">
                      {/* ÈÄ≤Êçó„Éê„Éº */}
                      <div className="mb-4">
                        <div className="flex justify-between text-xs text-blue-600 mb-1">
                          <span>Âá¶ÁêÜÈÄ≤Êçó</span>
                          <span>{Math.max(...processingSteps.map(s => s.progressPercent || 0))}%</span>
                        </div>
                        <div className="w-full bg-blue-100 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-blue-500 to-purple-500 h-2 rounded-full transition-all duration-500"
                            style={{ width: `${Math.max(...processingSteps.map(s => s.progressPercent || 0))}%` }}
                          ></div>
                        </div>
                        <div className="flex justify-between text-xs text-blue-500 mt-1">
                          {PROCESSING_STAGES.map((stage, idx) => (
                            <div 
                              key={stage.number}
                              className={`text-center ${
                                processingSteps.some(s => s.stepNumber >= stage.number) 
                                  ? 'text-blue-700 font-medium' 
                                  : 'text-blue-400'
                              }`}
                            >
                              {idx === 0 || idx === 3 || idx === 6 ? stage.number : '¬∑'}
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* „Çπ„ÉÜ„ÉÉ„ÉóË©≥Á¥∞ */}
                      <div className="space-y-3 max-h-60 overflow-y-auto">
                        {processingSteps.map((step, index) => {
                          const isLatest = index === processingSteps.length - 1;
                          const stage = PROCESSING_STAGES.find(s => s.number === step.stepNumber);
                          
                          return (
                            <div 
                              key={index} 
                              className={`space-y-2 p-3 rounded-lg border-l-4 ${
                                isLatest 
                                  ? 'border-l-blue-500 bg-blue-50' 
                                  : step.isCompleted 
                                    ? 'border-l-green-400 bg-green-50' 
                                    : 'border-l-gray-300 bg-gray-50'
                              }`}
                            >
                              <div className="flex items-start justify-between">
                                <div className="flex-grow">
                                  <div className="flex items-center space-x-2">
                                    <span className="text-xs font-bold text-blue-700">
                                      ÊÆµÈöé{step.stepNumber}/5
                                    </span>
                                    {step.agentType && (
                                      <span className="text-xs text-purple-600 bg-purple-100 px-2 py-0.5 rounded">
                                        {step.agentType}
                                      </span>
                                    )}
                                    {step.confidence && (
                                      <span className="text-xs text-green-600">
                                        ‰ø°È†ºÂ∫¶: {(step.confidence * 100).toFixed(0)}%
                                      </span>
                                    )}
                                  </div>
                                  <div className="text-xs font-medium text-blue-800 mt-1">
                                    <span className="text-gray-500">{step.time}</span> - {step.status}
                                  </div>
                                  <div className="text-xs text-blue-700 mt-1">
                                    {step.detail}
                                  </div>
                                  {step.reasoning && (
                                    <details className="mt-2">
                                      <summary className="text-xs text-blue-600 cursor-pointer hover:text-blue-800">
                                        üí≠ AIÊÄùËÄÉÈÅéÁ®ã„ÇíË°®Á§∫
                                      </summary>
                                      <div className="text-xs text-blue-600 mt-1 pl-3 border-l-2 border-blue-200 italic">
                                        {step.reasoning}
                                      </div>
                                    </details>
                                  )}
                                </div>
                                <div className="ml-2 flex flex-col items-end">
                                  {step.duration && step.duration > 0 && (
                                    <span className="text-xs text-gray-500">
                                      {(step.duration / 1000).toFixed(1)}s
                                    </span>
                                  )}
                                  {step.isCompleted && (
                                    <span className="text-green-500 text-xs">‚úì</span>
                                  )}
                                </div>
                              </div>
                              
                              {/* „Çπ„ÉÜ„Éº„Ç∏Ë™¨Êòé */}
                              {stage && isLatest && (
                                <div className="text-xs text-blue-600 bg-blue-100 p-2 rounded">
                                  {stage.description}
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* „Ç´„Çπ„Çø„É†„Éó„É≠„É≥„Éó„ÉàÂÖ•Âäõ„Ç®„É™„Ç¢ */}
              <div className="mb-6">
                <div className="bg-yellow-50 rounded-xl p-4 border border-yellow-200">
                  <div className="flex items-center justify-between mb-3">
                    <label className="text-sm font-medium text-yellow-800 flex items-center">
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                      üìù „Ç´„Çπ„Çø„É†ÊåáÁ§∫Ôºà‰ªªÊÑèÔºâ
                    </label>
                    <button
                      onClick={() => setCustomPrompt('')}
                      className="text-xs text-yellow-600 hover:text-yellow-800 underline"
                    >
                      „ÇØ„É™„Ç¢
                    </button>
                  </div>
                  
                  <textarea
                    value={customPrompt}
                    onChange={(e) => setCustomPrompt(e.target.value)}
                    placeholder="‰æã: ÂÄ§Âºï„Åç„Åó„Åü„ÅÑ„ÄÅ„ÇÇ„Å£„Å®Á©çÊ•µÁöÑ„Å´„ÄÅ‰∏ÅÂØß„Å™Ë®ÄËëâÈÅ£„ÅÑ„Åß„ÄÅÊÄ•„Åé„ÅßËøî‰ø°„ÅåÊ¨≤„Åó„ÅÑ„ÄÅ„Å™„Å©"
                    className="w-full px-3 py-2 text-sm border border-yellow-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent resize-none"
                    rows={2}
                  />
                  
                  <div className="mt-2 text-xs text-yellow-700">
                    üí° AI„ÅØ‰ºÅÊ•≠Ë®≠ÂÆö„ÉªÂïÜÊùêÊÉÖÂ†±„Éª‰∫§Ê∏â„Éù„Ç§„É≥„Éà„Å®‰Ωµ„Åõ„Å¶„ÄÅ„Åì„Åì„ÅßÊåáÂÆö„Åó„ÅüÂÜÖÂÆπ„ÇÇËÄÉÊÖÆ„Åó„Å¶Ëøî‰ø°„ÇíÁîüÊàê„Åó„Åæ„Åô
                  </div>
                </div>
              </div>

              {/* ÁîüÊàê„Éú„Çø„É≥ */}
              <div className="flex justify-center gap-4 mb-6">
                {/* ÈÄöÂ∏∏Áâà„Éú„Çø„É≥ */}
                <button
                  onClick={generateReplyPatterns}
                  disabled={isGeneratingPatterns}
                  className="btn btn-primary"
                >
                  {isGeneratingPatterns ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      AIÂàÜÊûê‰∏≠...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09z" />
                      </svg>
                      ü§ñ AIËøî‰ø°ÂÄôË£ú„ÇíÁîüÊàê
                    </>
                  )}
                </button>

              </div>

            </div>
            
            {/* AIÁîüÊàêÂü∫Êú¨Ëøî‰ø°Ë°®Á§∫„Ç®„É™„Ç¢ */}
            {aiBasicReply && (
              <div className="mb-8 bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 border border-green-200">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09z" />
                    </svg>
                    ü§ñ AIÁîüÊàêÂü∫Êú¨Ëøî‰ø°
                  </h3>
                  <button
                    onClick={() => setReplyText(aiBasicReply)}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                  >
                    Ëøî‰ø°Ê¨Ñ„Å´ÈÅ©Áî®
                  </button>
                </div>
                
                <div className="bg-white rounded-lg p-4 border border-green-100 mb-4">
                  <div className="text-sm text-gray-700 leading-relaxed whitespace-pre-wrap">
                    {aiBasicReply}
                  </div>
                </div>
                
                {/* Ëøî‰ø°ÁêÜÁî±Ë°®Á§∫ */}
                {aiReplyReasoning && (
                  <div className="mt-4">
                    <button
                      onClick={() => setShowReasoning(!showReasoning)}
                      className="flex items-center text-sm text-blue-600 hover:text-blue-800 mb-2"
                    >
                      <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                      </svg>
                      üí≠ „Å™„Åú„Åì„ÅÆËøî‰ø°„Å´„Åó„Åü„ÅÆ„Åã - AIÂà§Êñ≠ÁêÜÁî±
                      <span className="ml-2 text-xs">
                        {showReasoning ? '‚ñ≤' : '‚ñº'}
                      </span>
                    </button>
                    
                    {showReasoning && (
                      <div className="bg-blue-50 rounded-lg p-4 border border-blue-100">
                        <div className="text-sm text-blue-800 leading-relaxed whitespace-pre-wrap">
                          {aiReplyReasoning}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
            
            {/* AIÁîüÊàêËøî‰ø°„Éë„Çø„Éº„É≥ */}
            {isGeneratingPatterns ? (
              <div className="text-center py-12">
                <div className="animate-pulse">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {[1, 2, 3].map((i) => (
                      <div key={i} className="bg-gray-200 rounded-xl h-48"></div>
                    ))}
                  </div>
                </div>
                <p className="text-gray-500 mt-4">AI„ÅåËøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...</p>
              </div>
            ) : replyPatterns.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {replyPatterns.map((pattern, index) => {
                  const getPatternColor = (type: string) => {
                    switch(type) {
                      case 'friendly_enthusiastic':
                        return 'border-green-200 hover:border-green-400 hover:bg-green-50';
                      case 'cautious_professional':
                        return 'border-blue-200 hover:border-blue-400 hover:bg-blue-50';
                      case 'business_focused':
                        return 'border-purple-200 hover:border-purple-400 hover:bg-purple-50';
                      default:
                        return 'border-gray-200 hover:border-gray-400 hover:bg-gray-50';
                    }
                  };

                  const getPatternIcon = (type: string) => {
                    switch(type) {
                      case 'friendly_enthusiastic':
                        return (
                          <svg className="w-6 h-6 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        );
                      case 'cautious_professional':
                        return (
                          <svg className="w-6 h-6 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                          </svg>
                        );
                      case 'business_focused':
                        return (
                          <svg className="w-6 h-6 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                          </svg>
                        );
                      default:
                        return null;
                    }
                  };

                  return (
                    <div
                      key={index}
                      onClick={() => setReplyText(pattern.content)}
                      className={`p-6 border-2 rounded-xl cursor-pointer transition-all duration-300 group relative ${getPatternColor(pattern.pattern_type)}`}
                    >
                      {/* Êé®Â•®„Çπ„Ç≥„Ç¢ */}
                      <div className="absolute top-3 right-3">
                        <div className="bg-white rounded-full px-2 py-1 text-xs font-medium text-gray-600 border">
                          Êé®Â•®Â∫¶: {Math.round((pattern.recommendation_score || 0.5) * 100)}%
                        </div>
                      </div>
                      
                      <div className="flex items-center mb-4">
                        {getPatternIcon(pattern.pattern_type)}
                        <h4 className="font-semibold text-gray-900 ml-3">{pattern.pattern_name}</h4>
                      </div>
                      
                      <div className="mb-4">
                        <span className="text-xs text-gray-500 uppercase tracking-wide">„Éà„Éº„É≥</span>
                        <p className="text-sm font-medium text-gray-700">{pattern.tone}</p>
                      </div>
                      
                      <div className="bg-white rounded-lg p-3 mb-4 border">
                        <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-wrap">
                          {pattern.content}
                        </p>
                      </div>
                      
                      <div className="mb-4">
                        <span className="text-xs text-gray-500 uppercase tracking-wide">‰ΩøÁî®Â†¥Èù¢</span>
                        <p className="text-xs text-gray-600 leading-relaxed">
                          {pattern.reasoning}
                        </p>
                      </div>
                      
                      <div className="flex items-center text-xs text-gray-400 group-hover:text-gray-600 transition-colors">
                        <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122" />
                        </svg>
                        „ÇØ„É™„ÉÉ„ÇØ„ÅßËøî‰ø°Ê¨Ñ„Å´ÈÅ©Áî®
                      </div>
                    </div>
                  );
                })}
              </div>
            ) : currentThread ? (
              <div className="text-center py-12">
                <div className="max-w-md mx-auto">
                  <svg className="w-24 h-24 text-gray-300 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09z" />
                  </svg>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Ëøî‰ø°„Éë„Çø„Éº„É≥„ÇíÁîüÊàê</h3>
                  <p className="text-gray-500 mb-4">
                    ‰∏ä„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶AI„Å´Ëøî‰ø°ÂÄôË£ú„ÇíÁîüÊàê„Åï„Åõ„Å¶„Åè„Å†„Åï„ÅÑ
                  </p>
                </div>
              </div>
            ) : null}
          </div>
        )}

        {/* Ë©≥Á¥∞„Éà„É¨„Éº„ÇπË°®Á§∫„Éë„Éç„É´ */}
        {detailedTrace && (
          <div className="mt-6 bg-gray-50 rounded-lg p-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-800">
                üîç 5ÊÆµÈöé„Ç®„Éº„Ç∏„Çß„É≥„ÉàË©≥Á¥∞„Éà„É¨„Éº„Çπ
              </h3>
              <button
                onClick={() => setShowDetailedTrace(!showDetailedTrace)}
                className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200"
              >
                {showDetailedTrace ? 'ÈùûË°®Á§∫' : 'Ë©≥Á¥∞Ë°®Á§∫'}
              </button>
            </div>
            
            {showDetailedTrace && (
              <div className="space-y-4">
                {/* „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à */}
                {detailedTrace.performance_metrics && (
                  <div className="bg-white rounded p-3 border">
                    <h4 className="font-medium text-gray-700 mb-2">‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµ±Ë®à</h4>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-gray-600">Á∑èÂá¶ÁêÜÊôÇÈñì:</span>
                        <span className="ml-2 font-mono">{detailedTrace.performance_metrics.total_duration?.toFixed(2)}Áßí</span>
                      </div>
                      <div>
                        <span className="text-gray-600">Âá¶ÁêÜÂäπÁéá:</span>
                        <span className="ml-2 font-mono">{detailedTrace.performance_metrics.throughput}</span>
                      </div>
                    </div>
                  </div>
                )}

                {/* Âá¶ÁêÜ„Çπ„ÉÜ„Éº„Ç∏Ë©≥Á¥∞ */}
                {detailedTrace.processing_stages && (
                  <div className="bg-white rounded p-3 border">
                    <h4 className="font-medium text-gray-700 mb-3">üé≠ Âá¶ÁêÜ„Çπ„ÉÜ„Éº„Ç∏Ë©≥Á¥∞</h4>
                    <div className="space-y-2">
                      {detailedTrace.processing_stages.map((stage: any, index: number) => (
                        <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                          <div className="flex items-center space-x-3">
                            <span className="w-6 h-6 bg-blue-100 text-blue-700 rounded-full flex items-center justify-center text-sm font-medium">
                              {stage.stage}
                            </span>
                            <span className="font-medium">{stage.name}</span>
                          </div>
                          <div className="flex items-center space-x-4 text-sm text-gray-600">
                            <span>‚è±Ô∏è {stage.duration?.toFixed(2)}Áßí</span>
                            <span className="px-2 py-1 bg-green-100 text-green-700 rounded text-xs">
                              {stage.status}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* ‰∏≠ÈñìÁîüÊàêÁâ© */}
                {detailedTrace.intermediate_outputs && (
                  <div className="bg-white rounded p-3 border">
                    <h4 className="font-medium text-gray-700 mb-3">üìä ‰∏≠ÈñìÁîüÊàêÁâ©</h4>
                    <div className="space-y-3">
                      {detailedTrace.intermediate_outputs.thread_analysis && (
                        <div className="border-l-4 border-blue-400 pl-3">
                          <h5 className="font-medium text-sm text-blue-700">üìã „Çπ„É¨„ÉÉ„ÉâÂàÜÊûêÁµêÊûú</h5>
                          <div className="text-sm text-gray-600 mt-1">
                            <div>‰∫§Ê∏âÊÆµÈöé: <span className="font-mono">{detailedTrace.intermediate_outputs.thread_analysis.negotiation_stage}</span></div>
                            <div>ÊÑüÊÉÖÂàÜÊûê: <span className="font-mono">{detailedTrace.intermediate_outputs.thread_analysis.sentiment}</span></div>
                            <div>Á∑äÊÄ•Â∫¶: <span className="font-mono">{detailedTrace.intermediate_outputs.thread_analysis.urgency_level}</span></div>
                          </div>
                        </div>
                      )}

                      {detailedTrace.intermediate_outputs.strategy_plan && (
                        <div className="border-l-4 border-green-400 pl-3">
                          <h5 className="font-medium text-sm text-green-700">üß† Êà¶Áï•Á´ãÊ°àÁµêÊûú</h5>
                          <div className="text-sm text-gray-600 mt-1">
                            <div>„Ç¢„Éó„É≠„Éº„ÉÅ: <span className="font-mono">{detailedTrace.intermediate_outputs.strategy_plan.primary_approach}</span></div>
                            <div>„Éà„Éº„É≥: <span className="font-mono">{detailedTrace.intermediate_outputs.strategy_plan.tone_setting}</span></div>
                            <div>‰ø°È†ºÂ∫¶: <span className="font-mono">{detailedTrace.intermediate_outputs.strategy_plan.strategy_confidence}</span></div>
                          </div>
                        </div>
                      )}

                      {detailedTrace.intermediate_outputs.evaluation_result && (
                        <div className="border-l-4 border-yellow-400 pl-3">
                          <h5 className="font-medium text-sm text-yellow-700">üîç ÂÜÖÂÆπË©ï‰æ°ÁµêÊûú</h5>
                          <div className="text-sm text-gray-600 mt-1">
                            <div>Ë©ï‰æ°„Çπ„Ç≥„Ç¢: <span className="font-mono">{detailedTrace.intermediate_outputs.evaluation_result.quick_score}</span></div>
                            <div>ÊâøË™çÊé®Â•®: <span className="font-mono">{detailedTrace.intermediate_outputs.evaluation_result.approval_recommendation}</span></div>
                          </div>
                        </div>
                      )}

                      {detailedTrace.intermediate_outputs.patterns_result && (
                        <div className="border-l-4 border-purple-400 pl-3">
                          <h5 className="font-medium text-sm text-purple-700">üé® „Éë„Çø„Éº„É≥ÁîüÊàêÁµêÊûú</h5>
                          <div className="text-sm text-gray-600 mt-1">
                            <div>ÁîüÊàê„Éë„Çø„Éº„É≥Êï∞: <span className="font-mono">{Object.keys(detailedTrace.intermediate_outputs.patterns_result).filter(k => k.startsWith('pattern_')).length}ÂÄã</span></div>
                            <div>„Éë„Çø„Éº„É≥Á®ÆÈ°û: 
                              {Object.keys(detailedTrace.intermediate_outputs.patterns_result)
                                .filter(k => k.startsWith('pattern_'))
                                .map(k => detailedTrace.intermediate_outputs.patterns_result[k]?.approach)
                                .join(', ')}
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Ëá™Âãï‰∫§Ê∏â„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö */}
        <div className="mt-8">
          <AutomationOrchestrator 
            onMonitoringChange={handleMonitoringChange}
          />
        </div>
            </div>
          </main>
        </div>
      </ErrorBoundary>
    </AuthGuard>
  );
}

export default function MessagesPage() {
  return (
    <Suspense fallback={<div className="p-8 text-center">Ë™≠„ÅøËæº„Åø‰∏≠...</div>}>
      <MessagesPageContent />
    </Suspense>
  );
}